<%
# generates workbench.properties
use strict;

my ( $host, $result ) = @_;
$result->output_file('application.properties');
my $hostName = $host->get("network.hostname.1");
my $releaseType = $host->get("release.type");
my $springActiveProfile="development";
my $cookieDomain;
my $oktaUrl;
my $authorizationserverUrl;
my $oidcAppClientID;
my $oidcAppClientSecret;
my $oktaApiKey;
my $modelBuilderUrl;
my $dbConnectionUrl;
my $dbConnectionUserName;
my $kibanaUrl;
my $redisHost;
my $redisPort;
my $web2nlUrl;
my $web2nlApiKey;
my $sharedRepoRoot;
my $itsURL;
my $itsApiURL;
my $kibanaLogURL;
my $kibanaLogIndex;
my $esImpl="new";
my $environment;
my $amplitudeApiKey;
my $ApigeeApiKey;
my $audience;
my $externalApiRetryAttempts;
my $externalApiRetryWaitTimeMs;
my $gitHubRepositoryUrl;
my $gitHubRepositoryOrg;
my $gitHubRepositoryUser;
my $gitHubRepositoryUserKey;
my $mwbTellmeUserName;
my $mwbTellmeUserPwd;
my $contentDeploymentURL;
my $gitHubServer;
my $webrecoURL;
my $webrecoClient;
my $webrecoClientSecret;
my $elasticSearchUri;
my $browserLogoutWarning;
my $browserLogout;
my $ufpURL;
my $gitHubConnectionRetryTimeout;
my $gitHubConnectionRetryCount;
my $speechTimeout;
my $internalSupportLink;
my $externalSupportLink;
my $documentationLink;
my $modelBuildTimeout;
my $defModelConfig;

eval{$amplitudeApiKey = $host->get('amplitude.api.key');};
eval{$ApigeeApiKey = $host->get('tfs.apigee.api.key');};

eval{$springActiveProfile = $host->get('spring.profiles.active');};

eval{$cookieDomain = $host->get('server.session.cookie.domain');};
eval{$oktaUrl = $host->get('tfs.okta.url');};
eval{$authorizationserverUrl = $host->get('okta.oauth2.issuer');};
eval{$audience = $host->get('okta.oauth2.audience');};

eval{$oidcAppClientID = $host->get('okta.oauth2.clientId');};
eval{$oidcAppClientSecret = $host->get('okta.oauth2.clientSecret');};

eval{$modelBuilderUrl = $host->get('tfs.modelbuilder.url');};
eval{$dbConnectionUrl = $host->get('db.connection.url');};
eval{$dbConnectionUserName = $host->get('db.connection.username');};

eval{$kibanaUrl = $host->get('tfs.kibana.url');};
eval{$environment = $host->get('tfs.environment');};

eval{$redisHost = $host->get('tfs.redis.host');};
eval{$redisPort = $host->get('tfs.redis.port');};

eval{$web2nlUrl = $host->get('tfs.web2nl.url');};
eval{$web2nlApiKey = $host->get('tfs.web2nl.api.key');};

eval{$itsURL = $host->get('tfs.its.url');};
eval{$itsApiURL = $host->get('tfs.its.api.url');};
eval{$ufpURL = $host->get('tfs.ufp.url');};

eval{$kibanaLogURL = $host->get('tfs.kibana.log.url');};
eval{$kibanaLogIndex = $host->get('tfs.kibana.log.index');};

eval{$sharedRepoRoot = $host->get('tfs.app.shared-repo-root');};

eval{$webrecoURL = $host->get('tfs.webreco.url');};
eval{$webrecoClient = $host->get('tfs.webreco.client');};
eval{$webrecoClientSecret = $host->get('tfs.webreco.clientSecret');};

eval{$esImpl = $host->get('tfs.es.index.data.implementation');};

eval{$externalApiRetryAttempts = $host->get('tfs.external.api.retry.attempts');};

eval{$externalApiRetryWaitTimeMs = $host->get('tfs.external.api.retry.wait.time.ms');};

eval{$gitHubRepositoryUrl = $host->get('tfs.github.base.url');};

eval{$gitHubRepositoryOrg = $host->get('tfs.github.mwb.org');};

eval{$gitHubRepositoryUser = $host->get('tfs.github.mwb.org.user.name');};

eval{$gitHubRepositoryUserKey = $host->get('tfs.github.mwb.org.user.token');};

eval{$gitHubConnectionRetryTimeout = $host->get('tfs.github.mwb.org.retry.timeout');};

eval{$gitHubConnectionRetryCount = $host->get('tfs.github.mwb.org.retry.count');};

eval{$mwbTellmeUserName = $host->get('tfs.mwb.user.name');};

eval{$mwbTellmeUserPwd = $host->get('tfs.mwb.user.pwd');};

eval{$contentDeploymentURL = $host->get('tfs.github.mwb.content.deployment.url');};

eval{$gitHubServer = $host->get('tfs.github.server');};

eval{$elasticSearchUri = $host->get('spring.elasticsearch.rest.uris');};

eval{$browserLogoutWarning = $host->get('tfs.ui.logout.warning.timeout');};

eval{$browserLogout = $host->get('tfs.ui.logout.timeout');};

eval{$speechTimeout = $host->get('tfs.ui.speech.test.timeout');};

eval{$modelBuildTimeout = $host->get('tfs.model.build.timeout');};

eval{$internalSupportLink = $host->get('tfs.mwb.internal.support.url');};

eval{$externalSupportLink = $host->get('tfs.mwb.external.support.url');};

eval{$documentationLink = $host->get('tfs.mwb.documentation.url');};

eval{$defModelConfig = $host->get('defaultModelConfig');};

chmod(0777, $sharedRepoRoot) or die "Couldn't chmod $sharedRepoRoot: $!";

print <<EOFTEXT;
# generated by C90workbench.properties configgen script
EOFTEXT

print <<CFG;

###############################################################################
# Copyright ï¿½ [24]7 Customer, Inc.
# All Rights Reserved.
###############################################################################
spring.application.name = "Modelling Workbench"
spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources
spring.profiles.active=$springActiveProfile

# Server #
server.ssl.enabled=false
server.port=8080
management.server.port=9590
server.compression.enabled=true
server.error.whitelabel.enabled=false

## Session ##
server.session.cookie.domain=$cookieDomain
server.session.cookie.http-only=true
server.session.cookie.max-age=-1
server.session.cookie.name=JSESSIONID
server.session.cookie.path=/
server.session.cookie.secure=true
server.session.persistent=false
server.servlet.session.timeout=5400
server.session.tracking-modes=cookie

## Database ##
spring.flyway.enabled=true
spring.flyway.url=$dbConnectionUrl
spring.flyway.user=$dbConnectionUserName
spring.flyway.password=
spring.flyway.locations=classpath:db/migration
spring.flyway.table=schema_version
## flyway calculate wrong checksum during validation
spring.flyway.validateOnMigrate=false

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=$dbConnectionUrl
spring.datasource.username=$dbConnectionUserName
spring.datasource.password=
spring.datasource.type=com.mchange.v2.c3p0.ComboPooledDataSource

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.use-new-id-generator-mappings=false

spring.session.store-type=jdbc
spring.session.timeout=5400

service.client.create.enabled=true

quartz.enabled=true

# Custom #
tfs.auth.cookie-max-age=-1
tfs.auth.success-redirect-url=https://$cookieDomain/
tfs.rest.url-prefix=/nltools/
tfs.app.file-upload-repo-root=/var/tellme/

# to be modified after CLOUD-14832
tfs.app.shared-repo-root=/mount/nfs/workbench/

tfs.app.resource-file-location=/usr/local/lib/java/tellme/resources/
tfs.app.file-poll-refresh-interval-ms=60000

#Browser Timout
tfs.ui.logout.warning.timeout=$browserLogoutWarning
tfs.ui.logout.timeout=$browserLogout

# Mark the model as failed after timeout
tfs.model.build.timeout=$modelBuildTimeout

#Speech Test timeout
tfs.ui.speech.test.timeout=$speechTimeout

#Support and documentation url
tfs.mwb.internal.support.url=$internalSupportLink
tfs.mwb.external.support.url=$externalSupportLink
tfs.mwb.documentation.url=$documentationLink

# Freemarker #
freemarker.template-dir-prefix=/templates

# Logstash #
tfs.logstash.exec-timeout=900000
tfs.logstash.check-exec-timeout=30000
tfs.logstash.exec=/usr/local/logstash/bin/logstash

# default model Config #
defaultModelConfig=$defModelConfig

# CSV File Data #
tfs.csv.original-transcription-col-name=original_transcription
tfs.csv.normalized-transcription-col-name=transcription
tfs.csv.transcription-entity-col-name=transcription_entity

# Auto Categorizer #
tfs.auto-categorizer.categorize.enabled=true
tfs.auto-categorizer.categorize.url=http://localhost:8090/nltools/v1/categorize/
tfs.auto-categorizer.categorize.columns=filesize,filename,date,dataset,ru_tag,inherited_intent

# Okta Role Exclusions #

tfs.external.user.denied.resources=/v1/models/\\w/training-outputs,/v1/models/\\w/download
okta.oauth2.logoutURL=${oktaUrl}api/v1/sessions/me


# Spring #
spring.categorizerReadTimeout=3600000
spring.categorizerConnectTimeout=30000
spring.categorizerConnectionRequestTimeout=10000
endpoints.health.enabled=true
management.health.status.order=UP,DOWN,OUT_OF_SERVICE,UNKNOWN

# Orion #
tfs.orion.url = $modelBuilderUrl

# Model Config Support Files #
tfs.model.config.defualt.english.archive.old=old_support_files/old-config.zip
tfs.model.config.defualt.english.archive=support_files/config.json

# Kibana #
tfs.kibana.url=$kibanaUrl

tfs.redis.host=$redisHost
tfs.redis.port=$redisPort

#Web2NL#
tfs.web2nl.url=$web2nlUrl
tfs.web2nl.api.key=$web2nlApiKey

#Oauth2/OIDC SSO Params
tfs.login.url=https://$cookieDomain/login
tfs.okta.url=$oktaUrl
tfs.okta.user.account.url=${oktaUrl}enduser/settings
okta.oauth2.issuer=$authorizationserverUrl
okta.oauth2.audience=$audience
okta.oauth2.clientId=$oidcAppClientID
okta.oauth2.clientSecret=$oidcAppClientSecret
okta.oauth2.accessTokenUri=$authorizationserverUrl/v1/token
okta.oauth2.userAuthorizationUri=$authorizationserverUrl/v1/authorize
okta.oauth2.scope: openid profile email
okta.oauth2.localTokenValidation=false


#Spring Boot Actuator
management.endpoint.health.show-details=ALWAYS
management.endpoints.web.exposure.include=*
management.endpoint.beans.enabled=true
spring.elasticsearch.rest.uris=$elasticSearchUri

#Testing parameters
tfs.test.timeout=1000
tfs.test.longtimeout=10000
tfs.is.test=false
tfs.test.intEnv = default

tfs.test.intAccessToken = Bearer eyJraWQiOiJGN0hBbXFOQ3Y3eGRmVUVqUDVVZFZVS3dRS1ZtLS1PcktNem1FOFpaT1JJIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkNHTTRWYjMtMUR3YVYxNkNod3gyalpwMmRtenVRX29Va3dXWTdvR3d1SWciLCJpc3MiOiJodHRwczovL3Nzby0yNDctaW5jLm9rdGFwcmV2aWV3LmNvbS9vYXV0aDIvYXVzZjU5NXZzMXV1OEVXSmwwaDciLCJhdWQiOiJhcGk6Ly9kZWZhdWx0IiwiaWF0IjoxNTM5ODEyMjEwLCJleHAiOjE1Mzk4OTg2MTAsImNpZCI6IjBvYWY1NG9tZ293NzZCcTJnMGg3IiwidWlkIjoiMDB1ZTVxeHpkNjNKUVJIVmMwaDciLCJzY3AiOlsicHJvZmlsZSIsImVtYWlsIiwib3BlbmlkIl0sInN1YiI6Ik1hbmFzaS5LYXJ2YXRAMjQ3LmFpIiwiY2xpZW50cyI6WyJJQk0iXSwiZ3JvdXBzIjpbIkV2ZXJ5b25lIiwiTVdCIFRlYW0iLCJNV0JfUk9MRV9DTElFTlRBRE1JTiJdfQ.ghLkZxI2HjSbZRA3Yb35Yd-L7KPU2zdAJl0WXZ-THt71VVOcxMMNEYBfVkpb5XdjmTGh2sy5MYnhoW1n_Im6JEJlMkDZ5nTyr-jYPNGkGasBhDyxrBbDPx3QpAhGwB_p5Cg9FmRdPGDgvZfQwzTLLl06zihzKc0a15uJ__C2tPUbDXtpMvS965nJsIxbyBnJFswBq5-TmzQhvoSCYct3BQkHG90nI4u18a61ypOXDe_Vli2nWPk5AKaNVvklP0WGG58IaBjDKiwdD2Y5C009pO-u7Mlw7R76JyImtT1F4pj1tvjoldyUB4kY1LjNF9WT3FiD_YBrc5hQzVdXFH1jbA
tfs.test.intPollingCount=50

# ITS #
tfs.its.url=$itsURL
tfs.its.api.url=$itsApiURL

# Unified Portal #
tfs.ufp.url=$ufpURL


tfs.user.max.inactive.interval=60
tfs.user.sessions.max=20


tfs.kibana.log.url=$kibanaLogURL
tfs.kibana.log.index=$kibanaLogIndex

tfs.es.index.data.implementation=$esImpl

logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
logging.level.org.hibernate.SQL=INFO
logging.level.org.springframework.boot.web.filter.OrderedRequestContextFilter=INFO
logbook.write.level=INFO
logging.level.org.zalando.logbook = TRACE
logbook.write.max-body-size=10000

tfs.webreco.url=$webrecoURL
tfs.webreco.client=$webrecoClient
tfs.webreco.clientSecret=$webrecoClientSecret

# To send the amplitude event properties
tfs.environment=$environment
amplitude.api.key=$amplitudeApiKey

tfs.apigee.api.access.key=APIGEE${ApigeeApiKey}APIGEE

tfs.external.api.retry.attempts=$externalApiRetryAttempts
tfs.external.api.retry.wait.time.ms=$externalApiRetryWaitTimeMs

tfs.github.base.url=$gitHubRepositoryUrl
tfs.github.mwb.org=$gitHubRepositoryOrg
tfs.github.mwb.org.user.name=$gitHubRepositoryUser
tfs.github.mwb.org.user.token=$gitHubRepositoryUserKey
tfs.github.mwb.org.retry.timeout=$gitHubConnectionRetryTimeout
tfs.github.mwb.org.retry.count=$gitHubConnectionRetryCount

tfs.mwb.user.name=$mwbTellmeUserName
tfs.mwb.user.pwd=$mwbTellmeUserPwd

tfs.github.mwb.content.deployment.url=$contentDeploymentURL
tfs.github.server=$gitHubServer


CFG
%>
