
package com.tfs.learningsystems.db;

import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.EqualsAndHashCode;

import javax.persistence.*;

/**
 * The database operation of this object is handled by the BusinessObject. Hopefully, this will help
 * to simplify and unify these operations.
 *
 */

@Data
@EqualsAndHashCode(callSuper = false)
@Entity
@Table(name = "vectorizer")

public class VectorizerBO extends BusinessObject<VectorizerBO, String>
{
    public static final String DB_PREFIX = "vec";

    public enum IsLatest {

        ONE(1),

        ZERO(0);

        private final int value;

        IsLatest(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }

    @Id
    @GeneratedValue
    @Column(name = "id")
    @ApiModelProperty(readOnly = true, value = "internal id generated by MWB", example = "12")
    protected Integer id;

    @Column(name = "type")
    @ApiModelProperty(value = "defines a vectorizer_type", example = "USE base")
    protected String type;

    @Column(name = "version")
    @ApiModelProperty(value = "defines version", example = "2.0")
    protected String version;

    @Column(name = "created_by")
    @ApiModelProperty(value = "user id who created", example = "ml_user")
    protected String createdBy;

    @Column(name = "created_at")
    @ApiModelProperty(value = "created time", example = "String")
    protected Long createdAt;

    @Column(name = "modified_at")
    @ApiModelProperty(readOnly = true, value = "Last modified date", example = "String")
    protected Long modifiedAt;

    @Column(name = "modified_by")
    @ApiModelProperty(value = "user id who modified", example = "ml_user")
    protected String modifiedBy;

    @Column(name = "is_latest")
    @ApiModelProperty(value = "defines latest version of model technology", example = "1")
    protected Integer isLatest = IsLatest.ONE.value;

    public void setIsLatest(IsLatest isLatest) {
        this.isLatest = isLatest.value;
    }

    @Override
    public String getDbPrefix() {
        return DB_PREFIX;
    }
}