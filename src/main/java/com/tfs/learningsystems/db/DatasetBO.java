package com.tfs.learningsystems.db;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.ApiModelProperty;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * The database operation of this object is handled by the BusinessObject. Hopefully, this will help
 * to simplify and unify these operations.
 *
 * The table was named as 'datasets'. we will rename it to 'dataset' (without the s )
 */
@Data
@EqualsAndHashCode(callSuper = false)
@Entity
@Table(name = "datasets")
public class DatasetBO extends BusinessObject<DatasetBO, String> {

  public static final String DB_PREFIX = "dst";

  public static final String FLD_CLIENT_ID = "clientId";

  public static final String FLD_DATASET_ID = "id";

  public enum Source {

    I("I"),

    E("E"),

    A("A");

    private String value;

    Source(String value) {
      this.value = value;
    }

    public static Source lookup(String value) {
      for (Source sourceValues : Source.values()) {
        if (sourceValues.getValue().equalsIgnoreCase(value)) {
          return sourceValues;
        }
      }
      return null;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @Id
  @GeneratedValue
  @Column(name = "id")
  @ApiModelProperty(readOnly = true, value = "internal id generated by MWB")
  protected Integer id;

  @Column(name = "cid")
  @ApiModelProperty(readOnly = true, value = "internal client id generated for dataset", hidden = true)
  protected String cid = DbId.EMPTY.toString();

  @Column(name = "dbid")
  @ApiModelProperty(readOnly = true, value = "database id for the dataset", hidden = true)
  protected String dbid = DbId.EMPTY.toString();      // we will use this to replace the current ID

  @Column(name = "name")
  @ApiModelProperty(required = true, value = "dataset name", example = "20190531T1400")
  protected String name;

  @Column(name = "client_id")
  @ApiModelProperty(required = true, value = "client id to which this dataset belongs to", example = "159")
  protected String clientId;

  @Column(name = "project_id")
  @ApiModelProperty(required = true, value = "project id to which this dataset belongs to", example = "113")
  protected String projectId;

  @Column(name = "description")
  @ApiModelProperty(value = "dataset description", example = "Sepetember chat data")
  protected String description;

  @Column(name = "source")
  @ApiModelProperty(value = "source identification", hidden = true, readOnly = true)
  protected String source = Source.E.value;

  @Column(name = "uri")
  @ApiModelProperty(readOnly = true, value = "complete URI where file is uploaded", example = "https://tagging.247-inc.com:8443/nltools/private/v1/files/sample-columnmapped")
  protected String uri;

  @Column(name = "data_type")
  @ApiModelProperty(value = "datatype for this dataset", allowableValues = "{Audio/Voice (Live),Audio/Voice (Data Collection),Synthetic/Text,Virtual Assistant/Text,Email/Text,Social/Text,Chat/Text}",example = "Virtual Assistant/Text")
  protected String dataType;

  @Column(name = "locale")
  @ApiModelProperty(required = true, value = "locale for this dataset", example = "en-US")
  protected String locale = "en-US";

  @Column(name = "created_at")
  @ApiModelProperty(readOnly = true, value = "Dataset creation date", example = "1551998097406")
  protected Long createdAt;

  @Column(name = "received_at")
  @ApiModelProperty(readOnly = true, value = "Dataset uploaded date", example = "1552607411108")
  protected Long receivedAt;

  @Column(name = "modified_at")
  @ApiModelProperty(readOnly = true, value = "Dataset Last modified date", example = "1552607411108")
  protected Long modifiedAt;

  @Column(name = "created_by")
  @ApiModelProperty(value = "user id who created the dataset", example = "ml_user")
  protected String createdBy;

  @Column(name = "modified_by")
  @ApiModelProperty(value = "user id who modified the dataset", example = "ml_user")
  protected String modifiedBy;

  @Transient
  @ApiModelProperty(hidden = true, readOnly = true)
  private Integer offset = null;

  @Transient
  @ApiModelProperty(readOnly = true, value = "total transcriptions", example = "1512")
  private Long totalCount = null;

  @Transient
  @ApiModelProperty(readOnly = true, example = "COMPLETED")
  private String transformationStatus;

  @Transient
  @ApiModelProperty(readOnly = true, example = "INDEX")
  private String transformationTask;

  public void setSource(Source source) {
    this.source = source.value;
  }


  @JsonIgnore
  @Override
  public String getDbPrefix() {
    return DB_PREFIX;
  }

  @Override
  protected void preCreate() {
    super.preCreate();
    if (receivedAt == null) {
      receivedAt = createdAt;
    }
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dataset {\n");

    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    receivedAt: ").append(toIndentedString(receivedAt)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * @return JSON string of Project object
   */
  public String toJsonString() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    return mapper.writeValueAsString(this);
  }
}