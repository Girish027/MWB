
package com.tfs.learningsystems.db;

import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.EqualsAndHashCode;

import javax.persistence.*;

/**
 * The database operation of this object is handled by the BusinessObject. Hopefully, this will help
 * to simplify and unify these operations.
 *
 */

@Data
@EqualsAndHashCode(callSuper = false)
@Entity
@Table(name = "preferences")

public class PreferencesBO extends BusinessObject<PreferencesBO, String>
{
    public static final String DB_PREFIX = "prf";
    public static final String FLD_CLIENT_ID = "client_id";
    public static final String FLD_LEVEL = "level";
    public static final String FLD_ATTRIBUTE = "attribute";
    public static final String FLD_TYPE = "type";
    public static final String FLD_STATUS = "status";
    public static final String VALUE = "value";
    public static final String STATUS_ENABLED = "ENABLED";
    public static final String STATUS_DISABLED = "DISABLED";

    @Id
    @GeneratedValue
    @Column(name = "id")
    @ApiModelProperty(readOnly = true, value = "internal id generated by MWB", example = "12")
    protected Integer id;

    @Column(name = "client_id")
    @ApiModelProperty(value = "defines client id", example = "101")
    protected Integer client_id;


    @Column(name = "level")
    @ApiModelProperty(value = "defines a level of configuration", example = "client")
    protected String level;

    @Column(name = "type")
    @ApiModelProperty(value = "defines a type of configuration", example = "vectorizer")
    protected String type;

    @Column(name = "attribute")
    @ApiModelProperty(value = "defines a key", example = "247ai")
    protected String attribute;

    @Column(name = "value")
    @ApiModelProperty(value = "defines a Value", example = "1")
    protected Integer value;

    @Column(name = "status")
    @ApiModelProperty(value = "status of the preference", example = "ENABLED")
    protected String status = STATUS_ENABLED;

    @Column(name = "created_by")
    @ApiModelProperty(value = "user id who created", example = "ml_user")
    protected String createdBy;

    @Column(name = "created_at")
    @ApiModelProperty(value = "created time", example = "2021-06-01 16:14:40")
    protected Long createdAt;

    @Column(name = "modified_at")
    @ApiModelProperty(readOnly = true, value = "Last modified date", example = "2021-06-01 16:14:40")
    protected Long modifiedAt;

    @Column(name = "modified_by")
    @ApiModelProperty(value = "user id who modified", example = "ml_user")
    protected String modifiedBy;

    @Override
    public String getDbPrefix() {
        return DB_PREFIX;
    }

}