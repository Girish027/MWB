// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TrainingConfigs /> Creating an instance matches snapshot 1`] = `
<TrainingConfigs
  config={
    Object {
      "description": "Modeling Workbench default configs used for model building",
      "modelType": "normalization",
      "name": "MWB-Default",
      "postProcessingRules": Array [
        Object {
          "input-match": "/new reservation/",
          "intent-match": Array [
            "reservation-query",
          ],
          "intent-replacement": "reservation-make",
        },
      ],
      "trainingConfigs": Object {
        "add_stem_inflections": "true",
        "feat_and_window": 10,
        "feature_selection": "false",
        "numOfEpochs": 2,
        "num_feats_to_retain": 100,
        "out_of_domain_intent": "None_None",
        "parallel_SVM_trainings": 20,
        "parallel_sigmoid_trainings": 30,
        "stemmingExceptions": Array [],
        "use_sentence_marker": "false",
        "validationSplit": 3,
      },
      "transformations": Array [
        Object {
          "non-breaking-space-regex": Object {
            "mappings": Object {
              "/\\\\xao/i": " ",
            },
            "type": "regex-replace",
          },
        },
        "whitespace-normalization",
        Object {
          "sentence-marker": Object {
            "mappings": Object {
              "/$/": " _class_se",
              "/^/": "_class_ss ",
            },
            "type": "regex-replace",
          },
        },
        Object {
          "chat-shortcuts": Object {
            "mappings": Object {
              "2moro": "Tomorrow",
              "2nite": "Tonight",
              "B4N": "Bye For Now",
              "BCNU": "Be Seeing You",
              "BFF": "Best Friends Forever",
              "BRB": "Be Right Back",
              "BTW": "By The Way",
              "CYA": "See Ya",
              "DBEYR": "Don't Believe Everything You Read",
              "DILLIGAS": "Do I Look Like I Give A Shit",
              "FUD": "Fear Uncertainty and Disinformation",
              "FWIW": "For What It's Worth",
              "GR8": "Great",
              "ILY": "I Love You",
              "IMHO": "In My Humble Opinion",
              "IRL": "In Real Life",
              "ISO": "In Search Of",
              "J/K": "Just Kidding",
              "L8R": "Later",
              "LMAO": "Laughing My Ass Off",
              "LOL": "Laughing Out Loud",
              "LYLAS": "Love You Like A Sister",
              "MHOTY": "My Hat's Off To You",
              "NIMBY": "Not In My Back Yard",
              "NP": "No Problem",
              "NUB": "New person to a site or game",
              "OIC": "Oh I See",
              "OMG": "Oh My God",
              "OT": "Off Topic",
              "POV": "Point Of View",
              "RBTL": "Read Between The Lines",
              "ROTFLMAO": "Rolling On The Floor Laughing My Ass Off",
              "RT": "ReTweet",
              "RTFM": "Read The Fucking Manual",
              "RTM": "Read The Manual",
              "SH": "Shit Happens",
              "SITD": "Still In The Dark",
              "SOL": "Shit Out of Luck",
              "STBY": "Sucks To Be You",
              "SWAK": "Sent With A Kiss",
              "TFH": "Thread From Hell",
              "THKS": "Thanks",
              "THX": "Thanks",
              "TLC": "Tender Loving Care",
              "TMI": "Too Much Information",
              "TTYL": "Talk To You Later",
              "TX": "Thanks",
              "TYVM": "Thank You Very Much",
              "VBG": "Very Big Grin",
              "WEG": "Wicked Evil Grin",
              "WTF": "What The Fuck",
              "WYWH": "Wish You Were Here",
              "XOXO": "Hugs and Kisses",
            },
            "type": "stems-nocase",
          },
        },
        Object {
          "word-substitutions": Object {
            "comments": "These are client specific abbreviations",
            "mappings": Object {
              "'em": "them",
              "_class_debit_card's": "_class_debit_card is",
              "account's": "account",
              "advisor's": "advisor",
              "ain't": "am not",
              "aint": "am not",
              "aren't": "are not",
              "arent": "are not",
              "can't": "cannot",
              "cant": "cannot",
              "card's": "card is",
              "cashier's": "cashier",
              "check's": "check is",
              "couldn't": "could not",
              "couldnt": "could not",
              "deposit's": "deposit",
              "didn't": "did not",
              "didnt": "did not",
              "doesn't": "does not",
              "doesnt": "does not",
              "don't": "do not",
              "dont": "do not",
              "em": "them",
              "hadn't": "had not",
              "hadnt": "had not",
              "hasn't": "has not",
              "hasnt": "has not",
              "haven't": "have not",
              "havent": "have not",
              "he'd": "he would",
              "he'll": "he will",
              "he's": "he has",
              "i'd": "i would",
              "i'll": "i will",
              "i'm": "i am",
              "i've": "i have",
              "im": "i am",
              "isn't": "is not",
              "isnt": "is not",
              "it's": "it is",
              "its": "it is",
              "ive": "i have",
              "let's": "let us",
              "lets": "let us",
              "mightn't": "might not",
              "mightnt": "might not",
              "mustn't": "must not",
              "mustnt": "must not",
              "o'clock": "clock",
              "oclock": "clock",
              "shan't": "shall not",
              "shant": "shall not",
              "she'd": "she would",
              "she'll": "she will",
              "she's": "she is",
              "shouldn't": "should not",
              "shouldnt": "should not",
              "somebody's": "somebody is",
              "that's": "that is",
              "thats": "that is",
              "there's": "there is",
              "theres": "there is",
              "they'd": "they would",
              "they'll": "they will",
              "they're": "they are",
              "they've": "they have",
              "theyd": "they would",
              "theyll": "they will",
              "theyre": "they are",
              "theyve": "they have",
              "today's": "today",
              "transaction's": "transaction has",
              "wasn't": "was not",
              "wasnt": "was not",
              "we'd": "we would",
              "we'll": "we will",
              "we're": "we are",
              "we've": "we have",
              "weren't": "were not",
              "werent": "were not",
              "weve": "we have",
              "what'll": "what will",
              "what're": "what are",
              "what's": "what is",
              "what've": "what have",
              "whatll": "what will",
              "whatre": "what are",
              "whats": "what is",
              "whatve": "what have",
              "when'll": "when will",
              "when's": "when is",
              "whenll": "when will",
              "whens": "when is",
              "where's": "where is",
              "wheres": "where is",
              "who'd": "who would",
              "who'll": "who will",
              "who're": "who are",
              "who's": "who is",
              "who've": "who have",
              "whod": "who would",
              "wholl": "who will",
              "whos": "who is",
              "whove": "who have",
              "won't": "will not",
              "wont": "will not",
              "wouldn't": "would not",
              "wouldnt": "would not",
              "y'all": "you all",
              "ya'all": "you all",
              "yaall": "you all",
              "yall": "you all",
              "you'd": "you would",
              "you'll": "you will",
              "you're": "you are",
              "you've": "you have",
              "youd": "you would",
              "youll": "you will",
              "youre": "you are",
              "youve": "you have",
            },
            "type": "stems",
          },
        },
        Object {
          "email-regex": Object {
            "mappings": Object {
              "/(([\\\\w_\\\\.-])+@([\\\\d\\\\w\\\\.-])+\\\\.([a-z\\\\.]){2,6})/i": "_class_email",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "url-regex": Object {
            "mappings": Object {
              "/https?://(www\\\\.)?[\\\\-a-zA-Z0-9@:%._\\\\+~#=/]+/i": "_class_url",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "html-encoding": Object {
            "list": Array [
              "/%[0-9]+/",
            ],
            "type": "regex-removal",
          },
        },
        Object {
          "date-regex": Object {
            "mappings": Object {
              "/(?:(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*)?(?:(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)?\\\\s*(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\s*(?:[\\\\s,/\\\\.-]|of)?\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?))|(?:(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?))|(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)))(?:\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed))?/i": "_class_date",
              "/(?:(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*)?(?:(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b)|(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?))|(?:\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)))(?:\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed))?/i": "_class_date",
              "/(?:(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*)?(?:(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b)|(?:\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)))(?:\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed))?/i": "_class_date",
              "/(?:\\\\d{1,2}\\\\s*[/]\\\\s*(?:\\\\d{4}|\\\\d{2}))|(?:\\\\d{1,2}\\\\s*[\\\\.]\\\\s*\\\\d{4})/i": "_class_date",
              "/(?:\\\\d{1,2}\\\\s*[\\\\s/\\\\.-]\\\\s*\\\\d{1,2}\\\\s*[\\\\s/\\\\.-]\\\\s*(?:\\\\d{4}|\\\\d{2}))/i": "_class_date",
              "/\\\\b(?:january|february|march|april|june|july|august|september|october|november|december|jan|feb|mar|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b/i": "_class_date",
              "/\\\\b(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed)\\\\b/i": "_class_date",
            },
            "type": "wordclass-subst-regex",
          },
        },
        "whitespace-normalization",
        Object {
          "class_time": Object {
            "mappings": Object {
              "/(?:\\\\d{1,2}\\\\s*:?\\\\s*)?\\\\d{1,2}\\\\s*(?:am|pm|hrs|hours)/i": "_class_time",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "class_percentage": Object {
            "mappings": Object {
              "/(?:\\\\b(?:twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety)(?:(?:\\\\s|-)?(?:one|two|three|four|five|six|seven|eight|nine))?)\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
              "/(?:one(?:\\\\s|-))?hundred\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
              "/[0-9]+\\\\.[0-9]*\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
              "/[0-9]+\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
              "/\\\\b(?:zero|one|two|three|four|five|six|seven|eight|nine|hundred|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety)\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "phone_number": Object {
            "mappings": Object {
              "/\\\\(?([0-9]{3})?[-.\\\\s)]*[0-9]{3}[-.\\\\s]*[0-9]{4}\\\\b/": "_class_phone_number",
              "/\\\\b[0-9]{5}[\\\\s\\\\.-]?[0-9]{5}\\\\b/": "_class_phone_number",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "class_number": Object {
            "mappings": Object {
              "/#(?=[^a-zA-Z0-9])/i": "_class_number_ref",
              "/\\\\b(?:zero|one|two|three|four|five|six|seven|eight|nine|hundred|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety)'?s\\\\b/i": "_class_number",
              "/\\\\b[0-9]+(?:\\\\s*[\\\\.,]\\\\s*[0-9]+)*(?:\\\\s*(?:nd|th|rd|st))?\\\\b/i": "_class_number",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "enchant-spellcheck-enhance": Object {
            "type": "spell-checking",
          },
        },
        "case-normalization",
        Object {
          "wordclass-substitutions": Object {
            "mappings": Object {
              "/\\\\b(?:account|accnt|acct|acc)'?s?\\\\b/i": "_class_account",
              "/\\\\b(?:application|mobile app|app)'?s?\\\\b/i": "_class_app",
              "/\\\\b(?:customer services representative|customer service representative|customer services operator|customer service operator|customer services agent|customer care assistant|customer service agent|customer servicing|customer relations|real live person|customer service|representative|customer care|real person|live person|human being|call centre|supervisor|specialist|assistant|operator|advisor|adviser|human|agent|rep)'?s?\\\\b/i": "_class_agent",
              "/\\\\b(?:day after tomorrow|yesterday|day after|tomorrow|today|later)'?s?\\\\b/i": "_class_date",
              "/\\\\b(?:granddaughter|girlfriend|boyfriend|grandson|grandkid|daughter|husband|brother|spouse|sister|mother|father|cousin|wives|wife|son|kid)'?s?\\\\b/i": "_class_family",
              "/\\\\b(?:hello|hola|hey|hi)'?s?\\\\b/i": "_class_hello",
              "/\\\\b(?:on line|online)'?s?\\\\b/i": "_class_online",
              "/\\\\b(?:pissedoff|goddammit|fricking|bollocks|blighter|arsehole|goddamn|fucking|dipshit|bastard|asshole|wanker|bugger|bloody|blimey|whore|jesus|bitch|shit|geez|fuck|feck|darn|damn|crud|crap|arse|god)'?s?\\\\b/i": "_class_swears",
              "/\\\\b(?:pymnt|pymt|pyt|pmt)'?s?\\\\b/i": "_class_payment",
              "/\\\\b(?:settup|set up|setup)'?s?\\\\b/i": "_class_setup",
              "/\\\\b(?:seventeen|thirteen|nineteen|fourteen|eighteen|sixteen|seventy|hundred|fifteen|twenty|twelve|thirty|ninety|eleven|eighty|three|sixty|seven|forty|fifty|eight|zero|nine|four|five|two|ten|six|one)'?s?\\\\b/i": "_class_number",
              "/\\\\b(?:should not|would not|shouldn't|could not|wouldn't|will not|shouldnt|does not|couldn't|wouldnt|weren't|doesn't|did not|couldnt|can not|werent|do not|didn't|cannot|aren't|won't|never|isn't|don't|can't|arent|wont|isnt|dont|cant|aint|not|no)'?s?\\\\b/i": "_class_negation",
              "/\\\\b(?:text message|sms message|message|text|sms)'?s?\\\\b/i": "_class_text",
              "/\\\\b(?:yeah|okie|okay|yup|yes|yep|yea|ok)'?s?\\\\b/i": "_class_yes",
            },
            "type": "wordclass-subst-regex",
          },
        },
        "training-data-stems",
        Object {
          "punctuation-normalization": Object {
            "mappings": Object {
              "/(\\\\-|\\\\.|\\\\,|\\\\?|\\\\!|\\\\*|\\\\$|\\\\\\\\|\\\\%|\\\\&|\\\\#|\\\\@|\\\\:|\\\\||\\"|\\\\/|\\\\)|\\\\()/i": " ",
            },
            "type": "regex-replace",
          },
        },
        Object {
          "stops": Object {
            "list": Array [
              "been",
              "be",
              "your",
              "our",
              "we",
              "'em",
              "that",
              "uh",
              "are",
              "and",
              "of",
              "me",
              "um",
              "oh",
              "so",
              "you",
              "a",
              "like",
              "in",
              "was",
              "this",
              "i",
              "is",
              "it",
              "my",
              "an",
              "the",
              "at",
              "to",
            ],
            "type": "stop-words",
          },
        },
        Object {
          "rx-remove-dup-words": Object {
            "mappings": Object {
              "/\\\\b(\\\\w+)(\\\\s\\\\1\\\\b)+/i": "$1",
            },
            "type": "regex-replace",
          },
        },
        "whitespace-normalization",
      ],
      "version": "1.0.0",
    }
  }
  isCurrentTab={true}
  isTrainingConfigsValid={[Function]}
  model={
    Object {
      "_key": "13",
      "configId": "35",
      "configName": "test-cfg",
      "created": 1545013601717,
      "datasetIds": Array [
        "11",
      ],
      "description": "",
      "id": "13",
      "modelToken": "1ffba565-168c-4254-88a4-8249e39b2ce9",
      "name": "test",
      "projectId": "11",
      "status": "COMPLETED",
      "updated": 1545013601717,
      "userId": "laurie.reynolds@247.ai",
      "version": 8,
    }
  }
  modelViewReadOnly={false}
  saveConfigChanges={[Function]}
>
  <div
    id="TrainingConfigs"
  >
    <div
      id="training-input"
    >
      <ul
        className="form-fields"
      >
        <li>
          <div
            className="title"
          >
            My Training Configs
          </div>
        </li>
        <li>
          <label>
            Number of Folds
          </label>
          <withTheme(TextField)
            checkmarkProps={
              Object {
                "fill": "#004c97",
              }
            }
            defaultValue={3}
            disabled={false}
            invalid={false}
            name="validationSplit"
            onBlur={[Function]}
            onChange={[Function]}
            placeholder="validationSplit"
            showValidCheck={true}
            styleOverride={
              Object {
                "helpText": Object {
                  "height": "0px",
                },
                "width": "100%",
              }
            }
            tooltipText=""
            type="text"
          >
            <TextField
              alertIconProps={Object {}}
              autoComplete="on"
              checkmarkProps={
                Object {
                  "fill": "#004c97",
                }
              }
              defaultValue={3}
              disabled={false}
              invalid={false}
              name="validationSplit"
              onBlur={[Function]}
              onChange={[Function]}
              onKeyDown={[Function]}
              placeholder="validationSplit"
              showValidCheck={true}
              styleOverride={
                Object {
                  "helpText": Object {
                    "height": "0px",
                  },
                  "width": "100%",
                }
              }
              tfsStyle={
                Object {
                  "textField": Object {
                    "container": Object {
                      "cursor": "auto",
                      "display": "inline-block",
                      "width": "250px",
                    },
                    "errorInput": Object {
                      ":active": Object {
                        "border": "1px solid #E03C31",
                      },
                      ":focus": Object {
                        "color": "inherit",
                      },
                      "border": "1px solid #E03C31",
                      "color": "#E03C31",
                    },
                    "helpText": Object {
                      "fontSize": "12px",
                      "height": "13px",
                      "lineHeight": 1,
                      "marginTop": "5px",
                    },
                    "input": Object {
                      ":active": Object {
                        "border": "1px solid #000000",
                      },
                      ":focus": Object {
                        "border": "1px solid #336FAB",
                      },
                      ":hover": Object {
                        "border": "1px solid #000000",
                      },
                      "backgroundColor": "#FFFFFF",
                      "border": "1px solid #B2B2B2",
                      "borderRadius": "4px",
                      "boxSizing": "border-box",
                      "height": "40px",
                      "margin": "0px",
                      "opacity": 1,
                      "outline": "none",
                      "padding": "8px",
                      "width": "100%",
                    },
                  },
                }
              }
              tooltipDirection="bottom"
              tooltipText=""
              tooltipTrigger="click"
              type="text"
            >
              <div
                data-radium={true}
                style={
                  Object {
                    "cursor": "auto",
                    "display": "inline-block",
                    "width": "100%",
                  }
                }
              >
                <div
                  data-radium={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <input
                    autoComplete="on"
                    data-radium={true}
                    defaultValue={3}
                    disabled={false}
                    key=".0"
                    name="validationSplit"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    placeholder="validationSplit"
                    style={
                      Object {
                        "backgroundColor": "#FFFFFF",
                        "border": "1px solid #B2B2B2",
                        "borderRadius": "4px",
                        "boxSizing": "border-box",
                        "height": "40px",
                        "margin": "0px",
                        "opacity": 1,
                        "outline": "none",
                        "padding": "8px",
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    data-radium={true}
                    key=".1"
                    style={
                      Object {
                        "color": undefined,
                        "fontSize": "12px",
                        "height": "0px",
                        "lineHeight": 1,
                        "marginTop": "5px",
                      }
                    }
                  />
                </div>
              </div>
            </TextField>
          </withTheme(TextField)>
        </li>
        <li>
          <div
            className="title"
          >
            Stemming Exceptions
          </div>
          <label>
            Enter new tag
          </label>
          <div
            style={
              Object {
                "marginLeft": "-30px",
              }
            }
          >
            <EditorTags
              modelViewReadOnly={false}
              onUpdateTags={[Function]}
              transformationItem={Array []}
            >
              <div
                id="EditorTags"
              >
                <DragDropContext(ReactTags)
                  handleAddition={[Function]}
                  handleDelete={[Function]}
                  inline={false}
                  readOnly={false}
                  suggestions={Array []}
                  tags={Array []}
                >
                  <ReactTags
                    allowAdditionFromPaste={true}
                    allowDeleteFromEmptyInput={true}
                    allowDragDrop={true}
                    allowUnique={true}
                    autocomplete={false}
                    autofocus={true}
                    delimiters={
                      Array [
                        13,
                        9,
                      ]
                    }
                    handleAddition={[Function]}
                    handleDelete={[Function]}
                    inline={false}
                    inputFieldPosition="inline"
                    labelField="text"
                    placeholder="Add new tag"
                    readOnly={false}
                    resetInputOnDelete={true}
                    suggestions={Array []}
                    tags={Array []}
                  >
                    <div
                      className="ReactTags__tags react-tags-wrapper"
                    >
                      <div
                        className="ReactTags__selected"
                      />
                      <div
                        className="ReactTags__tagInput"
                      >
                        <input
                          aria-label="Add new tag"
                          className="ReactTags__tagInputField"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onPaste={[Function]}
                          placeholder="Add new tag"
                          type="text"
                        />
                        <Suggestions
                          classNames={
                            Object {
                              "activeSuggestion": "ReactTags__activeSuggestion",
                              "remove": "ReactTags__remove",
                              "selected": "ReactTags__selected",
                              "suggestions": "ReactTags__suggestions",
                              "tag": "ReactTags__tag",
                              "tagInput": "ReactTags__tagInput",
                              "tagInputField": "ReactTags__tagInputField",
                              "tags": "ReactTags__tags",
                            }
                          }
                          handleClick={[Function]}
                          handleHover={[Function]}
                          isFocused={false}
                          labelField="text"
                          minQueryLength={2}
                          query=""
                          selectedIndex={-1}
                          suggestions={Array []}
                        />
                      </div>
                    </div>
                  </ReactTags>
                </DragDropContext(ReactTags)>
              </div>
            </EditorTags>
          </div>
        </li>
      </ul>
    </div>
  </div>
</TrainingConfigs>
`;
