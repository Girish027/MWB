// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PostProcessingTransformations /> Creating an instance matches snapshot 1`] = `
<PostProcessingTransformations
  config={
    Object {
      "description": "Modeling Workbench default configs used for model building",
      "modelType": "normalization",
      "name": "MWB-Default",
      "postProcessingRules": Array [
        Object {
          "input-match": "/new reservation/",
          "intent-match": Array [
            "reservation-query",
          ],
          "intent-replacement": "reservation-make",
        },
      ],
      "trainingConfigs": Object {
        "add_stem_inflections": "true",
        "feat_and_window": 10,
        "feature_selection": "false",
        "numOfEpochs": 2,
        "num_feats_to_retain": 100,
        "out_of_domain_intent": "None_None",
        "parallel_SVM_trainings": 20,
        "parallel_sigmoid_trainings": 30,
        "stemmingExceptions": Array [],
        "use_sentence_marker": "false",
        "validationSplit": 3,
      },
      "transformations": Array [
        Object {
          "non-breaking-space-regex": Object {
            "mappings": Object {
              "/\\\\xao/i": " ",
            },
            "type": "regex-replace",
          },
        },
        "whitespace-normalization",
        Object {
          "sentence-marker": Object {
            "mappings": Object {
              "/$/": " _class_se",
              "/^/": "_class_ss ",
            },
            "type": "regex-replace",
          },
        },
        Object {
          "chat-shortcuts": Object {
            "mappings": Object {
              "2moro": "Tomorrow",
              "2nite": "Tonight",
              "B4N": "Bye For Now",
              "BCNU": "Be Seeing You",
              "BFF": "Best Friends Forever",
              "BRB": "Be Right Back",
              "BTW": "By The Way",
              "CYA": "See Ya",
              "DBEYR": "Don't Believe Everything You Read",
              "DILLIGAS": "Do I Look Like I Give A Shit",
              "FUD": "Fear Uncertainty and Disinformation",
              "FWIW": "For What It's Worth",
              "GR8": "Great",
              "ILY": "I Love You",
              "IMHO": "In My Humble Opinion",
              "IRL": "In Real Life",
              "ISO": "In Search Of",
              "J/K": "Just Kidding",
              "L8R": "Later",
              "LMAO": "Laughing My Ass Off",
              "LOL": "Laughing Out Loud",
              "LYLAS": "Love You Like A Sister",
              "MHOTY": "My Hat's Off To You",
              "NIMBY": "Not In My Back Yard",
              "NP": "No Problem",
              "NUB": "New person to a site or game",
              "OIC": "Oh I See",
              "OMG": "Oh My God",
              "OT": "Off Topic",
              "POV": "Point Of View",
              "RBTL": "Read Between The Lines",
              "ROTFLMAO": "Rolling On The Floor Laughing My Ass Off",
              "RT": "ReTweet",
              "RTFM": "Read The Fucking Manual",
              "RTM": "Read The Manual",
              "SH": "Shit Happens",
              "SITD": "Still In The Dark",
              "SOL": "Shit Out of Luck",
              "STBY": "Sucks To Be You",
              "SWAK": "Sent With A Kiss",
              "TFH": "Thread From Hell",
              "THKS": "Thanks",
              "THX": "Thanks",
              "TLC": "Tender Loving Care",
              "TMI": "Too Much Information",
              "TTYL": "Talk To You Later",
              "TX": "Thanks",
              "TYVM": "Thank You Very Much",
              "VBG": "Very Big Grin",
              "WEG": "Wicked Evil Grin",
              "WTF": "What The Fuck",
              "WYWH": "Wish You Were Here",
              "XOXO": "Hugs and Kisses",
            },
            "type": "stems-nocase",
          },
        },
        Object {
          "word-substitutions": Object {
            "comments": "These are client specific abbreviations",
            "mappings": Object {
              "'em": "them",
              "_class_debit_card's": "_class_debit_card is",
              "account's": "account",
              "advisor's": "advisor",
              "ain't": "am not",
              "aint": "am not",
              "aren't": "are not",
              "arent": "are not",
              "can't": "cannot",
              "cant": "cannot",
              "card's": "card is",
              "cashier's": "cashier",
              "check's": "check is",
              "couldn't": "could not",
              "couldnt": "could not",
              "deposit's": "deposit",
              "didn't": "did not",
              "didnt": "did not",
              "doesn't": "does not",
              "doesnt": "does not",
              "don't": "do not",
              "dont": "do not",
              "em": "them",
              "hadn't": "had not",
              "hadnt": "had not",
              "hasn't": "has not",
              "hasnt": "has not",
              "haven't": "have not",
              "havent": "have not",
              "he'd": "he would",
              "he'll": "he will",
              "he's": "he has",
              "i'd": "i would",
              "i'll": "i will",
              "i'm": "i am",
              "i've": "i have",
              "im": "i am",
              "isn't": "is not",
              "isnt": "is not",
              "it's": "it is",
              "its": "it is",
              "ive": "i have",
              "let's": "let us",
              "lets": "let us",
              "mightn't": "might not",
              "mightnt": "might not",
              "mustn't": "must not",
              "mustnt": "must not",
              "o'clock": "clock",
              "oclock": "clock",
              "shan't": "shall not",
              "shant": "shall not",
              "she'd": "she would",
              "she'll": "she will",
              "she's": "she is",
              "shouldn't": "should not",
              "shouldnt": "should not",
              "somebody's": "somebody is",
              "that's": "that is",
              "thats": "that is",
              "there's": "there is",
              "theres": "there is",
              "they'd": "they would",
              "they'll": "they will",
              "they're": "they are",
              "they've": "they have",
              "theyd": "they would",
              "theyll": "they will",
              "theyre": "they are",
              "theyve": "they have",
              "today's": "today",
              "transaction's": "transaction has",
              "wasn't": "was not",
              "wasnt": "was not",
              "we'd": "we would",
              "we'll": "we will",
              "we're": "we are",
              "we've": "we have",
              "weren't": "were not",
              "werent": "were not",
              "weve": "we have",
              "what'll": "what will",
              "what're": "what are",
              "what's": "what is",
              "what've": "what have",
              "whatll": "what will",
              "whatre": "what are",
              "whats": "what is",
              "whatve": "what have",
              "when'll": "when will",
              "when's": "when is",
              "whenll": "when will",
              "whens": "when is",
              "where's": "where is",
              "wheres": "where is",
              "who'd": "who would",
              "who'll": "who will",
              "who're": "who are",
              "who's": "who is",
              "who've": "who have",
              "whod": "who would",
              "wholl": "who will",
              "whos": "who is",
              "whove": "who have",
              "won't": "will not",
              "wont": "will not",
              "wouldn't": "would not",
              "wouldnt": "would not",
              "y'all": "you all",
              "ya'all": "you all",
              "yaall": "you all",
              "yall": "you all",
              "you'd": "you would",
              "you'll": "you will",
              "you're": "you are",
              "you've": "you have",
              "youd": "you would",
              "youll": "you will",
              "youre": "you are",
              "youve": "you have",
            },
            "type": "stems",
          },
        },
        Object {
          "email-regex": Object {
            "mappings": Object {
              "/(([\\\\w_\\\\.-])+@([\\\\d\\\\w\\\\.-])+\\\\.([a-z\\\\.]){2,6})/i": "_class_email",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "url-regex": Object {
            "mappings": Object {
              "/https?://(www\\\\.)?[\\\\-a-zA-Z0-9@:%._\\\\+~#=/]+/i": "_class_url",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "html-encoding": Object {
            "list": Array [
              "/%[0-9]+/",
            ],
            "type": "regex-removal",
          },
        },
        Object {
          "date-regex": Object {
            "mappings": Object {
              "/(?:(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*)?(?:(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)?\\\\s*(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\s*(?:[\\\\s,/\\\\.-]|of)?\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?))|(?:(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?))|(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)))(?:\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed))?/i": "_class_date",
              "/(?:(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*)?(?:(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b)|(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?))|(?:\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)))(?:\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed))?/i": "_class_date",
              "/(?:(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*)?(?:(?:(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b)|(?:\\\\b(?:january|february|march|april|may|june|july|august|september|october|november|december|jan|feb|mar|apr|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:\\\\d{4}|\\\\d{1,2}(?:nd|th|rd|st)?)))(?:\\\\s*(?:[\\\\s,/\\\\.-]|of)\\\\s*(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed))?/i": "_class_date",
              "/(?:\\\\d{1,2}\\\\s*[/]\\\\s*(?:\\\\d{4}|\\\\d{2}))|(?:\\\\d{1,2}\\\\s*[\\\\.]\\\\s*\\\\d{4})/i": "_class_date",
              "/(?:\\\\d{1,2}\\\\s*[\\\\s/\\\\.-]\\\\s*\\\\d{1,2}\\\\s*[\\\\s/\\\\.-]\\\\s*(?:\\\\d{4}|\\\\d{2}))/i": "_class_date",
              "/\\\\b(?:january|february|march|april|june|july|august|september|october|november|december|jan|feb|mar|jun|jul|aug|sept|sep|oct|nov|dec)\\\\b/i": "_class_date",
              "/\\\\b(?:monday|tuesday|wednesday|thursday|friday|saturday|sunday|mon|tue|wed)\\\\b/i": "_class_date",
            },
            "type": "wordclass-subst-regex",
          },
        },
        "whitespace-normalization",
        Object {
          "class_time": Object {
            "mappings": Object {
              "/(?:\\\\d{1,2}\\\\s*:?\\\\s*)?\\\\d{1,2}\\\\s*(?:am|pm|hrs|hours)/i": "_class_time",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "class_percentage": Object {
            "mappings": Object {
              "/(?:\\\\b(?:twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety)(?:(?:\\\\s|-)?(?:one|two|three|four|five|six|seven|eight|nine))?)\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
              "/(?:one(?:\\\\s|-))?hundred\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
              "/[0-9]+\\\\.[0-9]*\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
              "/[0-9]+\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
              "/\\\\b(?:zero|one|two|three|four|five|six|seven|eight|nine|hundred|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety)\\\\s?(?:%|percent(?:age|ile)?)/i": "_class_percentage",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "phone_number": Object {
            "mappings": Object {
              "/\\\\(?([0-9]{3})?[-.\\\\s)]*[0-9]{3}[-.\\\\s]*[0-9]{4}\\\\b/": "_class_phone_number",
              "/\\\\b[0-9]{5}[\\\\s\\\\.-]?[0-9]{5}\\\\b/": "_class_phone_number",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "class_number": Object {
            "mappings": Object {
              "/#(?=[^a-zA-Z0-9])/i": "_class_number_ref",
              "/\\\\b(?:zero|one|two|three|four|five|six|seven|eight|nine|hundred|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety)'?s\\\\b/i": "_class_number",
              "/\\\\b[0-9]+(?:\\\\s*[\\\\.,]\\\\s*[0-9]+)*(?:\\\\s*(?:nd|th|rd|st))?\\\\b/i": "_class_number",
            },
            "type": "wordclass-subst-regex",
          },
        },
        Object {
          "enchant-spellcheck-enhance": Object {
            "type": "spell-checking",
          },
        },
        "case-normalization",
        Object {
          "wordclass-substitutions": Object {
            "mappings": Object {
              "/\\\\b(?:account|accnt|acct|acc)'?s?\\\\b/i": "_class_account",
              "/\\\\b(?:application|mobile app|app)'?s?\\\\b/i": "_class_app",
              "/\\\\b(?:customer services representative|customer service representative|customer services operator|customer service operator|customer services agent|customer care assistant|customer service agent|customer servicing|customer relations|real live person|customer service|representative|customer care|real person|live person|human being|call centre|supervisor|specialist|assistant|operator|advisor|adviser|human|agent|rep)'?s?\\\\b/i": "_class_agent",
              "/\\\\b(?:day after tomorrow|yesterday|day after|tomorrow|today|later)'?s?\\\\b/i": "_class_date",
              "/\\\\b(?:granddaughter|girlfriend|boyfriend|grandson|grandkid|daughter|husband|brother|spouse|sister|mother|father|cousin|wives|wife|son|kid)'?s?\\\\b/i": "_class_family",
              "/\\\\b(?:hello|hola|hey|hi)'?s?\\\\b/i": "_class_hello",
              "/\\\\b(?:on line|online)'?s?\\\\b/i": "_class_online",
              "/\\\\b(?:pissedoff|goddammit|fricking|bollocks|blighter|arsehole|goddamn|fucking|dipshit|bastard|asshole|wanker|bugger|bloody|blimey|whore|jesus|bitch|shit|geez|fuck|feck|darn|damn|crud|crap|arse|god)'?s?\\\\b/i": "_class_swears",
              "/\\\\b(?:pymnt|pymt|pyt|pmt)'?s?\\\\b/i": "_class_payment",
              "/\\\\b(?:settup|set up|setup)'?s?\\\\b/i": "_class_setup",
              "/\\\\b(?:seventeen|thirteen|nineteen|fourteen|eighteen|sixteen|seventy|hundred|fifteen|twenty|twelve|thirty|ninety|eleven|eighty|three|sixty|seven|forty|fifty|eight|zero|nine|four|five|two|ten|six|one)'?s?\\\\b/i": "_class_number",
              "/\\\\b(?:should not|would not|shouldn't|could not|wouldn't|will not|shouldnt|does not|couldn't|wouldnt|weren't|doesn't|did not|couldnt|can not|werent|do not|didn't|cannot|aren't|won't|never|isn't|don't|can't|arent|wont|isnt|dont|cant|aint|not|no)'?s?\\\\b/i": "_class_negation",
              "/\\\\b(?:text message|sms message|message|text|sms)'?s?\\\\b/i": "_class_text",
              "/\\\\b(?:yeah|okie|okay|yup|yes|yep|yea|ok)'?s?\\\\b/i": "_class_yes",
            },
            "type": "wordclass-subst-regex",
          },
        },
        "training-data-stems",
        Object {
          "punctuation-normalization": Object {
            "mappings": Object {
              "/(\\\\-|\\\\.|\\\\,|\\\\?|\\\\!|\\\\*|\\\\$|\\\\\\\\|\\\\%|\\\\&|\\\\#|\\\\@|\\\\:|\\\\||\\"|\\\\/|\\\\)|\\\\()/i": " ",
            },
            "type": "regex-replace",
          },
        },
        Object {
          "stops": Object {
            "list": Array [
              "been",
              "be",
              "your",
              "our",
              "we",
              "'em",
              "that",
              "uh",
              "are",
              "and",
              "of",
              "me",
              "um",
              "oh",
              "so",
              "you",
              "a",
              "like",
              "in",
              "was",
              "this",
              "i",
              "is",
              "it",
              "my",
              "an",
              "the",
              "at",
              "to",
            ],
            "type": "stop-words",
          },
        },
        Object {
          "rx-remove-dup-words": Object {
            "mappings": Object {
              "/\\\\b(\\\\w+)(\\\\s\\\\1\\\\b)+/i": "$1",
            },
            "type": "regex-replace",
          },
        },
        "whitespace-normalization",
      ],
      "version": "1.0.0",
    }
  }
  isCurrentTab={true}
  model={
    Object {
      "_key": "13",
      "configId": "35",
      "configName": "test-cfg",
      "created": 1545013601717,
      "datasetIds": Array [
        "11",
      ],
      "description": "",
      "id": "13",
      "modelToken": "1ffba565-168c-4254-88a4-8249e39b2ce9",
      "name": "test",
      "projectId": "11",
      "status": "COMPLETED",
      "updated": 1545013601717,
      "userId": "laurie.reynolds@247.ai",
      "version": 8,
    }
  }
  modelViewReadOnly={false}
  saveConfigChanges={[Function]}
>
  <div
    id="ModelTransformationContainer"
  >
    <div
      id="modelTransformationItems"
    >
      <div
        id="PostProcessingTransformations"
      >
        <div
          style={
            Object {
              "borderBottom": "1px solid #ddd",
              "lineHeight": "60px",
              "paddingBottom": 2,
              "paddingLeft": 30,
            }
          }
        >
          Rules
        </div>
        <withTheme(ContextualActionsBar)
          styleOverride={
            Object {
              "borderBottom": "1px solid #ddd",
              "borderTop": "none",
            }
          }
        >
          <ContextualActionsBar
            styleOverride={
              Object {
                "borderBottom": "1px solid #ddd",
                "borderTop": "none",
              }
            }
            tfsStyle={
              Object {
                "contextualActionsBar": Object {
                  "actionInfo": Object {
                    "float": "right",
                    "label": Object {
                      "color": "#666666",
                      "float": "right",
                      "fontSize": "12px",
                      "marginTop": "20px",
                      "paddingRight": "30px",
                    },
                    "value": Object {
                      "color": "#999999",
                      "fontSize": "12px",
                      "marginLeft": "6px",
                    },
                  },
                  "actionItem": Object {
                    "disabled": Object {
                      "color": "#DCE1E8",
                      "pointerEvents": "none",
                    },
                    "enabled": Object {
                      ":hover": Object {
                        "color": "#003467",
                      },
                      "color": "#004C97",
                      "inFocus": Object {
                        "color": "#003467",
                      },
                    },
                    "left": Object {
                      "icon": Object {
                        "height": "10px",
                        "paddingRight": "6px",
                        "width": "10px",
                      },
                      "label": Object {
                        "cursor": "pointer",
                        "float": "left",
                        "fontSize": "12px",
                        "marginTop": "20px",
                        "paddingLeft": "30px",
                      },
                    },
                    "right": Object {
                      "icon": Object {
                        "height": "10px",
                        "paddingRight": "10px",
                        "width": "10px",
                      },
                      "label": Object {
                        "cursor": "pointer",
                        "float": "right",
                        "fontSize": "12px",
                        "marginTop": "20px",
                        "paddingRight": "30px",
                      },
                    },
                    "selected": Object {
                      "color": "#003467",
                    },
                  },
                  "actionsBar": Object {
                    "background": "#FFFFFF",
                    "borderBottom": "2px solid #F6F7F8",
                    "borderTop": "2px solid #F6F7F8",
                    "boxSizing": "border-box",
                    "height": "60px",
                  },
                },
              }
            }
          >
            <div
              data-radium={true}
              style={
                Object {
                  "background": "#FFFFFF",
                  "borderBottom": "1px solid #ddd",
                  "borderTop": "none",
                  "boxSizing": "border-box",
                  "height": "60px",
                }
              }
            >
              <withTheme(ContextualActionItem)
                icon={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "type": [Function],
                  }
                }
                onClickAction={[Function]}
                styleOverride={
                  Object {
                    "margin": "24px 0px",
                  }
                }
              >
                <ContextualActionItem
                  disabled={false}
                  icon={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  onClickAction={[Function]}
                  onKeyDown={[Function]}
                  right={false}
                  styleOverride={
                    Object {
                      "margin": "24px 0px",
                    }
                  }
                  tfsStyle={
                    Object {
                      "contextualActionsBar": Object {
                        "actionInfo": Object {
                          "float": "right",
                          "label": Object {
                            "color": "#666666",
                            "float": "right",
                            "fontSize": "12px",
                            "marginTop": "20px",
                            "paddingRight": "30px",
                          },
                          "value": Object {
                            "color": "#999999",
                            "fontSize": "12px",
                            "marginLeft": "6px",
                          },
                        },
                        "actionItem": Object {
                          "disabled": Object {
                            "color": "#DCE1E8",
                            "pointerEvents": "none",
                          },
                          "enabled": Object {
                            ":hover": Object {
                              "color": "#003467",
                            },
                            "color": "#004C97",
                            "inFocus": Object {
                              "color": "#003467",
                            },
                          },
                          "left": Object {
                            "icon": Object {
                              "height": "10px",
                              "paddingRight": "6px",
                              "width": "10px",
                            },
                            "label": Object {
                              "cursor": "pointer",
                              "float": "left",
                              "fontSize": "12px",
                              "marginTop": "20px",
                              "paddingLeft": "30px",
                            },
                          },
                          "right": Object {
                            "icon": Object {
                              "height": "10px",
                              "paddingRight": "10px",
                              "width": "10px",
                            },
                            "label": Object {
                              "cursor": "pointer",
                              "float": "right",
                              "fontSize": "12px",
                              "marginTop": "20px",
                              "paddingRight": "30px",
                            },
                          },
                          "selected": Object {
                            "color": "#003467",
                          },
                        },
                        "actionsBar": Object {
                          "background": "#FFFFFF",
                          "borderBottom": "2px solid #F6F7F8",
                          "borderTop": "2px solid #F6F7F8",
                          "boxSizing": "border-box",
                          "height": "60px",
                        },
                      },
                    }
                  }
                >
                  <div
                    data-qa="actionItem"
                    data-radium={true}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                    role="menuitem"
                    tabIndex={0}
                  >
                    <div
                      data-radium={true}
                      key="action-item-label"
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "color": "#004C97",
                          "cursor": "pointer",
                          "float": "left",
                          "fontSize": "12px",
                          "margin": "24px 0px",
                          "marginTop": "20px",
                          "paddingLeft": "30px",
                        }
                      }
                    >
                      <span
                        data-radium={true}
                        key=".$action-item-icon"
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        style={
                          Object {
                            "color": "#004C97",
                            "height": "10px",
                            "margin": "24px 0px",
                            "paddingRight": "6px",
                            "width": "10px",
                          }
                        }
                      >
                        <withTheme(Plus)
                          fill="#004C97"
                          height="10px"
                          width="10px"
                        >
                          <Plus
                            fill="#004C97"
                            height="10px"
                            tfsStyle={
                              Object {
                                "icons": Object {
                                  "common": Object {
                                    "borderColor": "#B2B2B2",
                                    "color": "#004C97",
                                    "colorLight": "#336FAB",
                                    "disabledColor": "#E0E0E0",
                                    "fillColor": "#FFFFFF",
                                  },
                                },
                              }
                            }
                            width="10px"
                          >
                            <svg
                              height="10px"
                              viewBox="0 0 24 24"
                              width="10px"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M12 0A12 12 0 110 12 12 12 0 0112 0z"
                                fill="#004C97"
                              />
                              <path
                                d="M17.641 10.613h-4.293V6.32H10.69v4.293H6.397v2.658h4.293v4.293h2.658v-4.293h4.293z"
                                fill="#FFFFFF"
                              />
                            </svg>
                          </Plus>
                        </withTheme(Plus)>
                      </span>
                      ADD
                    </div>
                  </div>
                </ContextualActionItem>
              </withTheme(ContextualActionItem)>
            </div>
          </ContextualActionsBar>
        </withTheme(ContextualActionsBar)>
        <DragDropWrapper
          droppableId="postprocessing-droppable"
          getListStyle={[Function]}
          isDisabled={false}
          items={
            Array [
              Object {
                "content": <DraggableItem
                  className="transformation-list-item transformation-selected-item"
                  id="name-0"
                  index={0}
                  itemContentClass="transformation-item-content"
                  modelViewReadOnly={false}
                  noOfItems={0}
                  onDelete={[Function]}
                  onSelect={[Function]}
                >
                  <div
                    className="transformation-name"
                  >
                    /new reservation/
                  </div>
                  <div
                    className="transformation-type"
                  >
                    reservation-query - reservation-make
                  </div>
                </DraggableItem>,
                "id": "name-0",
              },
            ]
          }
          onDragEnd={[Function]}
        >
          <DragDropContext
            onDragEnd={[Function]}
          >
            <Connect(Droppable)
              direction="vertical"
              droppableId="droppable"
              ignoreContainerClipping={false}
              isDropDisabled={false}
              type="DEFAULT"
            >
              <Droppable
                direction="vertical"
                dispatch={[Function]}
                draggingOverWith={null}
                droppableId="droppable"
                ignoreContainerClipping={false}
                isDraggingOver={false}
                isDropDisabled={false}
                placeholder={null}
                type="DEFAULT"
              >
                <DroppableDimensionPublisher
                  direction="vertical"
                  droppableId="droppable"
                  getDroppableRef={[Function]}
                  ignoreContainerClipping={false}
                  isDropDisabled={false}
                  type="DEFAULT"
                >
                  <div
                    style={
                      Object {
                        "background": "white",
                        "maxHeight": "calc(100vh - 370px)",
                        "overflow": "auto",
                        "width": "100%",
                      }
                    }
                  >
                    <Connect(Draggable)
                      disableInteractiveElementBlocking={false}
                      draggableId="name-0"
                      index={0}
                      isDragDisabled={false}
                      key="name-0"
                    >
                      <Draggable
                        dimension={null}
                        disableInteractiveElementBlocking={false}
                        draggableId="name-0"
                        draggingOver={null}
                        drop={[Function]}
                        dropAnimationFinished={[Function]}
                        index={0}
                        isDragDisabled={false}
                        isDragging={false}
                        isDropAnimating={false}
                        lift={[Function]}
                        move={[Function]}
                        moveByWindowScroll={[Function]}
                        moveDown={[Function]}
                        moveLeft={[Function]}
                        moveRight={[Function]}
                        moveUp={[Function]}
                        offset={
                          Object {
                            "x": 0,
                            "y": 0,
                          }
                        }
                        shouldAnimateDisplacement={true}
                        shouldAnimateDragMovement={false}
                      >
                        <DraggableDimensionPublisher
                          draggableId="name-0"
                          droppableId="droppable"
                          getDraggableRef={[Function]}
                          index={0}
                          key="name-0"
                          type="DEFAULT"
                        >
                          <Moveable
                            destination={
                              Object {
                                "x": 0,
                                "y": 0,
                              }
                            }
                            onMoveEnd={[Function]}
                            speed="INSTANT"
                          >
                            <Motion
                              defaultStyle={
                                Object {
                                  "x": 0,
                                  "y": 0,
                                }
                              }
                              onRest={[Function]}
                              style={
                                Object {
                                  "x": 0,
                                  "y": 0,
                                }
                              }
                            >
                              <DoubleRenderBlocker
                                change={
                                  Object {
                                    "x": 0,
                                    "y": 0,
                                  }
                                }
                              >
                                <DragHandle
                                  callbacks={
                                    Object {
                                      "onCancel": [Function],
                                      "onDrop": [Function],
                                      "onLift": [Function],
                                      "onMove": [Function],
                                      "onMoveDown": [Function],
                                      "onMoveLeft": [Function],
                                      "onMoveRight": [Function],
                                      "onMoveUp": [Function],
                                      "onWindowScroll": [Function],
                                    }
                                  }
                                  canDragInteractiveElements={false}
                                  draggableId="name-0"
                                  getDraggableRef={[Function]}
                                  isDragging={false}
                                  isDropAnimating={false}
                                  isEnabled={true}
                                >
                                  <div
                                    aria-roledescription="Draggable item. Press space bar to lift"
                                    data-react-beautiful-dnd-drag-handle="0"
                                    draggable={false}
                                    onBlur={[Function]}
                                    onDragStart={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onMouseDown={[Function]}
                                    onTouchStart={[Function]}
                                    style={
                                      Object {
                                        "background": "white",
                                        "transform": null,
                                        "transition": null,
                                        "userSelect": "none",
                                      }
                                    }
                                    tabIndex={0}
                                    transform={null}
                                    transition={null}
                                  >
                                    <DraggableItem
                                      className="transformation-list-item transformation-selected-item"
                                      id="name-0"
                                      index={0}
                                      itemContentClass="transformation-item-content"
                                      modelViewReadOnly={false}
                                      noOfItems={0}
                                      onDelete={[Function]}
                                      onSelect={[Function]}
                                    >
                                      <div
                                        className="list-item transformation-list-item transformation-selected-item"
                                        data-name="item-0"
                                        key="item-name-0"
                                        onClick={[Function]}
                                        style={Object {}}
                                      >
                                        <div
                                          className="index"
                                        >
                                          1
                                        </div>
                                        <div
                                          className="item-content  transformation-item-content"
                                        >
                                          <div
                                            className="transformation-name"
                                          >
                                            /new reservation/
                                          </div>
                                          <div
                                            className="transformation-type"
                                          >
                                            reservation-query - reservation-make
                                          </div>
                                        </div>
                                        <div
                                          className="list-item-delete"
                                        >
                                          <IconButton
                                            defaultColor="#004c97"
                                            disabled={false}
                                            disabledColor="#9B9B9B"
                                            focusedColor="#003467"
                                            height={10}
                                            icon={[Function]}
                                            onClick={[Function]}
                                            padding="1px"
                                            strokeColor="none"
                                            styleOverride={Object {}}
                                            title="Delete Item"
                                            width={10}
                                          >
                                            <withTheme(Button)
                                              disabled={false}
                                              name="action-button"
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onFocus={[Function]}
                                              onMouseEnter={[Function]}
                                              onMouseLeave={[Function]}
                                              onMouseOut={[Function]}
                                              onMouseOver={[Function]}
                                              styleOverride={
                                                Object {
                                                  ":focus": Object {
                                                    "outline": "none",
                                                  },
                                                  ":hover": Object {
                                                    "boxShadow": "none",
                                                    "color": "#003467",
                                                  },
                                                  "backgroundColor": "initial",
                                                  "border": "none",
                                                  "color": "#004C97",
                                                  "height": "auto",
                                                  "minHeight": "0px",
                                                  "padding": "1px",
                                                }
                                              }
                                              tabIndex={0}
                                              title="Delete Item"
                                              type="flat"
                                            >
                                              <Button
                                                disabled={false}
                                                name="action-button"
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onFocus={[Function]}
                                                onMouseDown={[Function]}
                                                onMouseEnter={[Function]}
                                                onMouseLeave={[Function]}
                                                onMouseOut={[Function]}
                                                onMouseOver={[Function]}
                                                styleOverride={
                                                  Object {
                                                    ":focus": Object {
                                                      "outline": "none",
                                                    },
                                                    ":hover": Object {
                                                      "boxShadow": "none",
                                                      "color": "#003467",
                                                    },
                                                    "backgroundColor": "initial",
                                                    "border": "none",
                                                    "color": "#004C97",
                                                    "height": "auto",
                                                    "minHeight": "0px",
                                                    "padding": "1px",
                                                  }
                                                }
                                                tabIndex={0}
                                                tfsStyle={
                                                  Object {
                                                    "button": Object {
                                                      "base": Object {
                                                        ":focus": Object {
                                                          "outline": "2px solid #009CDE",
                                                        },
                                                        "border": "1px solid transparent",
                                                        "borderRadius": "4px",
                                                        "cursor": "pointer",
                                                        "fontSize": "13px",
                                                        "fontWeight": 600,
                                                        "minHeight": "35px",
                                                        "minWidth": "100px",
                                                        "outlineOffset": "2px",
                                                        "paddingLeft": "20px",
                                                        "paddingRight": "20px",
                                                        "wordBreak": "normal",
                                                      },
                                                      "disabled": Object {
                                                        "cursor": "not-allowed",
                                                        "flat": Object {
                                                          "color": "#666666",
                                                        },
                                                        "primary": Object {
                                                          "backgroundColor": "#E0E0E0",
                                                          "color": "#666666",
                                                        },
                                                        "secondary": Object {
                                                          "border": "2px solid #E0E0E0",
                                                          "color": "#666666",
                                                        },
                                                      },
                                                      "flat": Object {
                                                        ":active": Object {
                                                          "color": "#004C97",
                                                        },
                                                        ":hover": Object {
                                                          "boxShadow": "0px 2px 5px 0px #DBDBDB",
                                                          "color": "#336FAB",
                                                        },
                                                        "backgroundColor": "transparent",
                                                        "color": "#000000",
                                                        "minWidth": "auto",
                                                        "paddingLeft": "10px",
                                                        "paddingRight": "10px",
                                                      },
                                                      "primary": Object {
                                                        ":active": Object {
                                                          "backgroundColor": "#336FAB",
                                                          "boxShadow": "inset 0px 0px 3px 0px #004C97",
                                                          "color": "#FFFFFF",
                                                        },
                                                        ":hover": Object {
                                                          "backgroundColor": "#336FAB",
                                                          "boxShadow": "2px 3px 10px 0px #DBDBDB",
                                                          "color": "#FFFFFF",
                                                        },
                                                        "backgroundColor": "#004C97",
                                                        "color": "#FFFFFF",
                                                      },
                                                      "secondary": Object {
                                                        ":active": Object {
                                                          "border": "2px solid #336FAB",
                                                          "boxShadow": "inset 0px 0px 3px 0px #336FAB",
                                                          "color": "#336FAB",
                                                        },
                                                        ":hover": Object {
                                                          "border": "2px solid #336FAB",
                                                          "boxShadow": "0px 2px 5px 0px #DBDBDB",
                                                          "color": "#336FAB",
                                                        },
                                                        "backgroundColor": "#FFFFFF",
                                                        "border": "2px solid #004C97",
                                                        "color": "#004C97",
                                                      },
                                                    },
                                                  }
                                                }
                                                title="Delete Item"
                                                type="flat"
                                              >
                                                <button
                                                  data-radium={true}
                                                  disabled={false}
                                                  name="action-button"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseEnter={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseOut={[Function]}
                                                  onMouseOver={[Function]}
                                                  style={
                                                    Object {
                                                      "backgroundColor": "initial",
                                                      "border": "none",
                                                      "borderRadius": "4px",
                                                      "color": "#004C97",
                                                      "cursor": "pointer",
                                                      "fontSize": "13px",
                                                      "fontWeight": 600,
                                                      "height": "auto",
                                                      "minHeight": "0px",
                                                      "minWidth": "auto",
                                                      "outlineOffset": "2px",
                                                      "padding": "1px",
                                                      "paddingLeft": "10px",
                                                      "paddingRight": "10px",
                                                      "wordBreak": "normal",
                                                    }
                                                  }
                                                  tabIndex={0}
                                                  title="Delete Item"
                                                  type="button"
                                                >
                                                  <Xmark
                                                    fill="#004c97"
                                                    height={10}
                                                    stroke="none"
                                                    width={10}
                                                  >
                                                    <svg
                                                      height={10}
                                                      stroke="none"
                                                      viewBox="0 0 24 24"
                                                      width={10}
                                                    >
                                                      <path
                                                        d="M.421 20.58a1.442 1.442 0 0 0 2.038 2.04l8.891-8.89a.242.242 0 0 1 .34 0l8.891 8.89a1.445 1.445 0 0 0 2.41-.64 1.46 1.46 0 0 0-.372-1.4l-8.891-8.89a.257.257 0 0 1-.071-.17.239.239 0 0 1 .071-.17l8.892-8.89A1.442 1.442 0 0 0 20.581.42L11.69 9.31a.242.242 0 0 1-.34 0L2.459.42A1.442 1.442 0 0 0 .421 2.46l8.891 8.89a.239.239 0 0 1 .071.17.257.257 0 0 1-.071.17z"
                                                        data-name="remove"
                                                        fill="#004c97"
                                                        fillRule="evenodd"
                                                      />
                                                    </svg>
                                                  </Xmark>
                                                </button>
                                              </Button>
                                            </withTheme(Button)>
                                          </IconButton>
                                          <span
                                            className="grabbable"
                                            title="Grab and Reorder"
                                          >
                                            <DragIcon
                                              fill="#313f54"
                                              height={13.5}
                                              width={8.5}
                                            >
                                              <svg
                                                height={13.5}
                                                viewBox="0 0 8 14"
                                                width={8.5}
                                              >
                                                <g
                                                  data-name="Group 52"
                                                >
                                                  <g
                                                    data-name="streamline-icon-dial-finger-1@24x24 (1)"
                                                  >
                                                    <path
                                                      d="M1.75-.001A1.75 1.75 0 1 1 0 1.75 1.751 1.751 0 0 1 1.75-.001zm5 0A1.75 1.75 0 1 1 5 1.75 1.751 1.751 0 0 1 6.75-.001zm-5 5A1.75 1.75 0 1 1 0 6.75a1.751 1.751 0 0 1 1.75-1.751zm5 0A1.75 1.75 0 1 1 5 6.75a1.751 1.751 0 0 1 1.75-1.751zm-5 5A1.75 1.75 0 1 1 0 11.75a1.751 1.751 0 0 1 1.75-1.751zm5 0A1.75 1.75 0 1 1 5 11.75a1.751 1.751 0 0 1 1.75-1.751z"
                                                      data-name="Path 11"
                                                      fill="#313f54"
                                                    />
                                                  </g>
                                                </g>
                                              </svg>
                                            </DragIcon>
                                          </span>
                                        </div>
                                      </div>
                                    </DraggableItem>
                                  </div>
                                </DragHandle>
                              </DoubleRenderBlocker>
                            </Motion>
                          </Moveable>
                        </DraggableDimensionPublisher>
                      </Draggable>
                    </Connect(Draggable)>
                  </div>
                </DroppableDimensionPublisher>
              </Droppable>
            </Connect(Droppable)>
          </DragDropContext>
        </DragDropWrapper>
      </div>
    </div>
    <div
      id="modelTransformationEditor"
    >
      <withTheme(Tabs)
        align="left"
        forceRenderTabPanel={false}
        onTabSelected={[Function]}
        selectedIndex={0}
        styleOverride={
          Object {
            "tabContainer": Object {
              "borderTop": "none",
              "marginLeft": "1px",
            },
            "tabPanel": Object {
              "height": "calc(100vh - 245px)",
            },
          }
        }
        tabPanels={
          Array [
            <div
              className="editor-panel"
              id="Editor"
            >
              <div
                className="post-processing-container"
                style={
                  Object {
                    "position": "relative",
                    "width": "430px",
                  }
                }
              >
                <ul
                  className="form-fields rules-form"
                >
                  <li>
                    <label>
                      Input Match*
                    </label>
                    <withTheme(TextField)
                      data-idx={0}
                      data-name="input-match"
                      data-qa="input-match"
                      defaultValue="/new reservation/"
                      disabled={false}
                      onBlur={[Function]}
                      onKeyPress={[Function]}
                      styleOverride={
                        Object {
                          "width": "100%",
                        }
                      }
                      type="text"
                    />
                    <div
                      className="help-text overflow-wrap"
                      style={
                        Object {
                          "color": "#727272",
                        }
                      }
                    >
                      Enter comma separated input match values
                    </div>
                  </li>
                  <li>
                    <label>
                      Intent Match*
                    </label>
                    <withTheme(CreatableSelect)
                      isClearable={true}
                      isDisabled={false}
                      isMulti={false}
                      isSearchable={true}
                      onChange={[Function]}
                      onCreateOption={[Function]}
                      options={
                        Array [
                          Object {
                            "isDisabled": false,
                            "label": "any",
                            "value": "any",
                          },
                        ]
                      }
                      styleOverride={
                        Object {
                          "container": Object {
                            "width": "100%",
                          },
                        }
                      }
                      value={
                        Array [
                          Object {
                            "isDisabled": false,
                            "label": "reservation-query",
                            "value": "reservation-query",
                          },
                        ]
                      }
                    />
                  </li>
                  <li>
                    <label>
                      Intent Replacement*
                    </label>
                    <withTheme(Select)
                      isClearable={true}
                      isDisabled={false}
                      isSearchable={true}
                      onChange={[Function]}
                      options={Array []}
                      styleOverride={
                        Object {
                          "container": Object {
                            "width": "100%",
                          },
                        }
                      }
                      value={
                        Object {
                          "isDisabled": false,
                          "label": "reservation-make",
                          "value": "reservation-make",
                        }
                      }
                    />
                  </li>
                </ul>
                <withTheme(Button)
                  disabled={false}
                  name="save-item"
                  onClick={[Function]}
                  styleOverride={
                    Object {
                      "position": "absolute",
                      "right": 0,
                    }
                  }
                  type="primary"
                >
                  UPDATE
                </withTheme(Button)>
              </div>
            </div>,
            <div
              className="editor-panel"
              id="Editor"
            >
              <PostProcessingJSONEditor
                currentItem={
                  Object {
                    "input-match": "/new reservation/",
                    "intent-match": Array [
                      "reservation-query",
                    ],
                    "intent-replacement": "reservation-make",
                  }
                }
                modelViewReadOnly={false}
                onUpdateProcessingRules={[Function]}
                ruleIdx={0}
              />
            </div>,
          ]
        }
        tabs={
          Array [
            "UI",
            "JSON",
          ]
        }
      >
        <Tabs
          align="left"
          disabledTabs={Array []}
          displayMode="default"
          displayType="horizontal"
          forceRenderTabPanel={false}
          onTabSelected={[Function]}
          selectedIndex={0}
          styleOverride={
            Object {
              "tabContainer": Object {
                "borderTop": "none",
                "marginLeft": "1px",
              },
              "tabPanel": Object {
                "height": "calc(100vh - 245px)",
              },
            }
          }
          tabNames={Array []}
          tabPanels={
            Array [
              <div
                className="editor-panel"
                id="Editor"
              >
                <div
                  className="post-processing-container"
                  style={
                    Object {
                      "position": "relative",
                      "width": "430px",
                    }
                  }
                >
                  <ul
                    className="form-fields rules-form"
                  >
                    <li>
                      <label>
                        Input Match*
                      </label>
                      <withTheme(TextField)
                        data-idx={0}
                        data-name="input-match"
                        data-qa="input-match"
                        defaultValue="/new reservation/"
                        disabled={false}
                        onBlur={[Function]}
                        onKeyPress={[Function]}
                        styleOverride={
                          Object {
                            "width": "100%",
                          }
                        }
                        type="text"
                      />
                      <div
                        className="help-text overflow-wrap"
                        style={
                          Object {
                            "color": "#727272",
                          }
                        }
                      >
                        Enter comma separated input match values
                      </div>
                    </li>
                    <li>
                      <label>
                        Intent Match*
                      </label>
                      <withTheme(CreatableSelect)
                        isClearable={true}
                        isDisabled={false}
                        isMulti={false}
                        isSearchable={true}
                        onChange={[Function]}
                        onCreateOption={[Function]}
                        options={
                          Array [
                            Object {
                              "isDisabled": false,
                              "label": "any",
                              "value": "any",
                            },
                          ]
                        }
                        styleOverride={
                          Object {
                            "container": Object {
                              "width": "100%",
                            },
                          }
                        }
                        value={
                          Array [
                            Object {
                              "isDisabled": false,
                              "label": "reservation-query",
                              "value": "reservation-query",
                            },
                          ]
                        }
                      />
                    </li>
                    <li>
                      <label>
                        Intent Replacement*
                      </label>
                      <withTheme(Select)
                        isClearable={true}
                        isDisabled={false}
                        isSearchable={true}
                        onChange={[Function]}
                        options={Array []}
                        styleOverride={
                          Object {
                            "container": Object {
                              "width": "100%",
                            },
                          }
                        }
                        value={
                          Object {
                            "isDisabled": false,
                            "label": "reservation-make",
                            "value": "reservation-make",
                          }
                        }
                      />
                    </li>
                  </ul>
                  <withTheme(Button)
                    disabled={false}
                    name="save-item"
                    onClick={[Function]}
                    styleOverride={
                      Object {
                        "position": "absolute",
                        "right": 0,
                      }
                    }
                    type="primary"
                  >
                    UPDATE
                  </withTheme(Button)>
                </div>
              </div>,
              <div
                className="editor-panel"
                id="Editor"
              >
                <PostProcessingJSONEditor
                  currentItem={
                    Object {
                      "input-match": "/new reservation/",
                      "intent-match": Array [
                        "reservation-query",
                      ],
                      "intent-replacement": "reservation-make",
                    }
                  }
                  modelViewReadOnly={false}
                  onUpdateProcessingRules={[Function]}
                  ruleIdx={0}
                />
              </div>,
            ]
          }
          tabs={
            Array [
              "UI",
              "JSON",
            ]
          }
          tfsStyle={
            Object {
              "tabs": Object {
                "listContainer": Object {
                  "backgroundColor": "#FAFBFC",
                  "button": Object {
                    "horizontal": Object {
                      "borderBottom": "1px solid #ddd",
                      "borderTop": "1px solid #ddd",
                      "center": Object {
                        "justifyContent": "center",
                      },
                      "display": "flex",
                      "left": Object {
                        "flexDirection": "row",
                      },
                      "right": Object {
                        "flexDirection": "row-reverse",
                      },
                    },
                    "vertical": Object {
                      "borderLeft": "1px solid #ddd",
                      "borderRight": "1px solid #ddd",
                      "display": "flex",
                      "flexDirection": "column",
                    },
                  },
                  "default": Object {
                    "horizontal": Object {
                      "borderBottom": "1px solid #ddd",
                      "borderTop": "1px solid #ddd",
                      "center": Object {
                        "justifyContent": "center",
                      },
                      "display": "flex",
                      "left": Object {
                        "flexDirection": "row",
                      },
                      "right": Object {
                        "flexDirection": "row-reverse",
                      },
                    },
                    "vertical": Object {
                      "borderLeft": "1px solid #ddd",
                      "borderRight": "1px solid #ddd",
                      "display": "flex",
                      "flexDirection": "column",
                      "width": "max-content",
                    },
                  },
                  "listStyleType": "none",
                  "margin": "0px",
                  "overflow": "auto",
                  "overflowX": "auto",
                  "overflowY": "hidden",
                  "padding": "0px",
                  "whiteSpace": "nowrap",
                },
                "listItemStyle": Object {
                  "button": Object {
                    "disabled": Object {
                      "backgroundColor": "#E0E0E0",
                      "color": "#666666",
                      "cursor": "not-allowed",
                    },
                    "enabled": Object {
                      ":hover": Object {
                        "backgroundColor": "#EEEFF2",
                        "color": "#004C97",
                      },
                      "cursor": "pointer",
                    },
                    "horizontal": Object {
                      "borderRadius": "4px",
                      "color": "#000000",
                      "margin": "10px 5px",
                      "padding": "10px 20px",
                      "textAlign": "center",
                    },
                    "vertical": Object {
                      "borderRadius": "4px",
                      "color": "#000000",
                      "margin": "5px",
                      "padding": "10px 20px",
                      "textAlign": "center",
                    },
                  },
                  "default": Object {
                    "disabled": Object {
                      "border": "2px solid #0000",
                      "color": "#bdbdbd",
                      "cursor": "not-allowed",
                    },
                    "enabled": Object {
                      ":focus": Object {
                        "backgroundColor": "#EEEFF2",
                      },
                      ":hover": Object {
                        "backgroundColor": "#EEEFF2",
                        "color": "#003467",
                      },
                      "cursor": "pointer",
                    },
                    "horizontal": Object {
                      "borderBottom": "2px solid #0000",
                      "color": "#004C97",
                      "padding": "23px 30px 22px 30px",
                      "textAlign": "center",
                    },
                    "vertical": Object {
                      "borderRight": "2px solid #0000",
                      "boxSizing": "content-box",
                      "color": "#004C97",
                      "padding": "23px 30px",
                    },
                  },
                  "fontSize": "13px",
                  "fontWeight": "normal",
                  "transition": "color 0.2s linear,border-bottom-color 0.2s linear",
                },
                "selectedItemStyle": Object {
                  "button": Object {
                    "horizontal": Object {
                      "backgroundColor": "#CCDBEA",
                      "color": "#004C97",
                    },
                    "vertical": Object {
                      "backgroundColor": "#CCDBEA",
                      "color": "#004C97",
                    },
                  },
                  "default": Object {
                    "horizontal": Object {
                      "borderBottom": "2px solid #003467",
                    },
                    "vertical": Object {
                      "borderRight": "2px solid #003467",
                    },
                  },
                },
                "wrapper": Object {
                  "horizontal": Object {
                    "display": "flex",
                    "flexDirection": "column",
                  },
                  "vertical": Object {
                    "display": "flex",
                    "flexDirection": "row",
                  },
                },
              },
            }
          }
        >
          <div
            data-radium={true}
            style={
              Object {
                "display": "flex",
                "flexDirection": "column",
              }
            }
          >
            <ul
              data-radium={true}
              key=".0"
              role="tablist"
              style={
                Object {
                  "backgroundColor": "#FAFBFC",
                  "borderBottom": "1px solid #ddd",
                  "borderTop": "none",
                  "display": "flex",
                  "flexDirection": "row",
                  "listStyleType": "none",
                  "margin": "0px",
                  "marginLeft": "1px",
                  "overflow": "auto",
                  "overflowX": "auto",
                  "overflowY": "hidden",
                  "padding": "0px",
                  "whiteSpace": "nowrap",
                }
              }
            >
              <li
                aria-selected={true}
                data-radium={true}
                id="tab_UI"
                key=".$UI"
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                role="tab"
                style={
                  Object {
                    "borderBottom": "2px solid #003467",
                    "color": "#004C97",
                    "cursor": "pointer",
                    "fontSize": "13px",
                    "fontWeight": "normal",
                    "padding": "23px 30px 22px 30px",
                    "textAlign": "center",
                    "transition": "color 0.2s linear,border-bottom-color 0.2s linear",
                  }
                }
                tabIndex={0}
              >
                UI
              </li>
              <li
                aria-selected={false}
                data-radium={true}
                id="tab_JSON"
                key=".$JSON"
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                role="tab"
                style={
                  Object {
                    "borderBottom": "2px solid #0000",
                    "color": "#004C97",
                    "cursor": "pointer",
                    "fontSize": "13px",
                    "fontWeight": "normal",
                    "padding": "23px 30px 22px 30px",
                    "textAlign": "center",
                    "transition": "color 0.2s linear,border-bottom-color 0.2s linear",
                  }
                }
                tabIndex={0}
              >
                JSON
              </li>
            </ul>
            <div
              aria-hidden={false}
              aria-labelledby="tab_UI"
              data-radium={true}
              id="tabpanel_UI"
              key=".$UI"
              role="tabpanel"
              style={
                Object {
                  "height": "calc(100vh - 245px)",
                  "margin": "0px",
                }
              }
            >
              <div
                className="editor-panel"
                data-radium={true}
                id="Editor"
              >
                <div
                  className="post-processing-container"
                  data-radium={true}
                  style={
                    Object {
                      "position": "relative",
                      "width": "430px",
                    }
                  }
                >
                  <ul
                    className="form-fields rules-form"
                    data-radium={true}
                    key=".0"
                  >
                    <li
                      data-radium={true}
                      key=".0"
                    >
                      <label
                        key=".0"
                      >
                        Input Match*
                      </label>
                      <withTheme(TextField)
                        data-idx={0}
                        data-name="input-match"
                        data-qa="input-match"
                        defaultValue="/new reservation/"
                        disabled={false}
                        key=".$input-match-0"
                        onBlur={[Function]}
                        onKeyPress={[Function]}
                        styleOverride={
                          Object {
                            "width": "100%",
                          }
                        }
                        type="text"
                      >
                        <TextField
                          alertIconProps={Object {}}
                          autoComplete="on"
                          checkmarkProps={Object {}}
                          data-idx={0}
                          data-name="input-match"
                          data-qa="input-match"
                          defaultValue="/new reservation/"
                          disabled={false}
                          invalid={false}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onKeyDown={[Function]}
                          onKeyPress={[Function]}
                          showValidCheck={false}
                          styleOverride={
                            Object {
                              "width": "100%",
                            }
                          }
                          tfsStyle={
                            Object {
                              "textField": Object {
                                "container": Object {
                                  "cursor": "auto",
                                  "display": "inline-block",
                                  "width": "250px",
                                },
                                "errorInput": Object {
                                  ":active": Object {
                                    "border": "1px solid #E03C31",
                                  },
                                  ":focus": Object {
                                    "color": "inherit",
                                  },
                                  "border": "1px solid #E03C31",
                                  "color": "#E03C31",
                                },
                                "helpText": Object {
                                  "fontSize": "12px",
                                  "height": "13px",
                                  "lineHeight": 1,
                                  "marginTop": "5px",
                                },
                                "input": Object {
                                  ":active": Object {
                                    "border": "1px solid #000000",
                                  },
                                  ":focus": Object {
                                    "border": "1px solid #336FAB",
                                  },
                                  ":hover": Object {
                                    "border": "1px solid #000000",
                                  },
                                  "backgroundColor": "#FFFFFF",
                                  "border": "1px solid #B2B2B2",
                                  "borderRadius": "4px",
                                  "boxSizing": "border-box",
                                  "height": "40px",
                                  "margin": "0px",
                                  "opacity": 1,
                                  "outline": "none",
                                  "padding": "8px",
                                  "width": "100%",
                                },
                              },
                            }
                          }
                          tooltipDirection="bottom"
                          tooltipText=""
                          tooltipTrigger="click"
                          type="text"
                        >
                          <div
                            data-radium={true}
                            style={
                              Object {
                                "cursor": "auto",
                                "display": "inline-block",
                                "width": "100%",
                              }
                            }
                          >
                            <div
                              data-radium={true}
                              style={
                                Object {
                                  "position": "relative",
                                }
                              }
                            >
                              <input
                                autoComplete="on"
                                data-idx={0}
                                data-name="input-match"
                                data-qa="input-match"
                                data-radium={true}
                                defaultValue="/new reservation/"
                                disabled={false}
                                key=".0"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyPress={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                style={
                                  Object {
                                    "backgroundColor": "#FFFFFF",
                                    "border": "1px solid #B2B2B2",
                                    "borderRadius": "4px",
                                    "boxSizing": "border-box",
                                    "height": "40px",
                                    "margin": "0px",
                                    "opacity": 1,
                                    "outline": "none",
                                    "padding": "8px",
                                    "width": "100%",
                                  }
                                }
                                type="text"
                              />
                              <div
                                data-radium={true}
                                key=".1"
                                style={
                                  Object {
                                    "color": undefined,
                                    "fontSize": "12px",
                                    "height": "13px",
                                    "lineHeight": 1,
                                    "marginTop": "5px",
                                  }
                                }
                              />
                            </div>
                          </div>
                        </TextField>
                      </withTheme(TextField)>
                      <div
                        className="help-text overflow-wrap"
                        data-radium={true}
                        key=".2"
                        style={
                          Object {
                            "color": "#727272",
                          }
                        }
                      >
                        Enter comma separated input match values
                      </div>
                    </li>
                    <li
                      data-radium={true}
                      key=".1"
                    >
                      <label
                        key=".0"
                      >
                        Intent Match*
                      </label>
                      <withTheme(CreatableSelect)
                        isClearable={true}
                        isDisabled={false}
                        isMulti={false}
                        isSearchable={true}
                        key=".1"
                        onChange={[Function]}
                        onCreateOption={[Function]}
                        options={
                          Array [
                            Object {
                              "isDisabled": false,
                              "label": "any",
                              "value": "any",
                            },
                          ]
                        }
                        styleOverride={
                          Object {
                            "container": Object {
                              "width": "100%",
                            },
                          }
                        }
                        value={
                          Array [
                            Object {
                              "isDisabled": false,
                              "label": "reservation-query",
                              "value": "reservation-query",
                            },
                          ]
                        }
                      >
                        <CreatableSelect
                          deselectAllChildren="DESELECT ALL"
                          hideSelectedOptions={false}
                          isClearable={true}
                          isDisabled={false}
                          isMulti={false}
                          isSearchable={true}
                          itemMissingLabel="Not in list - Click to Add"
                          maxMenuHeight={180}
                          onChange={[Function]}
                          onCreateOption={[Function]}
                          options={
                            Array [
                              Object {
                                "isDisabled": false,
                                "label": "any",
                                "value": "any",
                              },
                            ]
                          }
                          placeholder="Select"
                          selectAllChildren="SELECT ALL"
                          styleOverride={
                            Object {
                              "container": Object {
                                "width": "100%",
                              },
                            }
                          }
                          tfsStyle={
                            Object {
                              "select": Object {
                                "clearIndicator": Object {
                                  "display": "none",
                                },
                                "container": Object {
                                  "cursor": "auto",
                                  "display": "inline-block",
                                  "width": "250px",
                                },
                                "control": Object {
                                  ":active": Object {
                                    "border": "1px solid #000000",
                                  },
                                  ":hover": Object {
                                    "border": "1px solid #000000",
                                  },
                                  "backgroundColor": "#FFFFFF",
                                  "border": "1px solid #B2B2B2",
                                  "borderRadius": "4px",
                                  "minHeight": "40px",
                                  "opacity": 1,
                                },
                                "createNew": Object {
                                  "input": Object {
                                    "display": "inline-block",
                                  },
                                  "label": Object {
                                    "margin": "5px auto",
                                    "textAlign": "center",
                                  },
                                },
                                "dropdownIndicator": Object {
                                  "color": "#333333",
                                },
                                "input": Object {
                                  ":active": Object {
                                    "border": "1px solid #000000",
                                  },
                                  ":focus": Object {
                                    "border": "2px solid #B2B2B2",
                                  },
                                  ":hover": Object {
                                    "border": "2px solid #000000",
                                  },
                                  "backgroundColor": "#FFFFFF",
                                  "border": "1px solid #B2B2B2",
                                  "borderRadius": "4px",
                                  "boxSizing": "border-box",
                                  "height": "40px",
                                  "margin": "0px",
                                  "opacity": 1,
                                  "outline": "none",
                                  "padding": "8px",
                                  "width": "100%",
                                },
                                "inputBox": Object {
                                  "color": "#333333",
                                  "fontSize": "13px",
                                },
                                "menu": Object {
                                  "borderRadius": "0px",
                                  "marginTop": "5px",
                                },
                                "menuList": Object {
                                  "paddingBottom": "0px",
                                  "paddingTop": "0px",
                                },
                                "multiValue": Object {
                                  "borderRadius": "4px",
                                  "color": "#999999",
                                  "fontSize": "13px",
                                  "margin": "5px 12px 5px 0px",
                                },
                                "multiValueLabel": Object {
                                  "backgroundColor": "inherit",
                                  "borderRadius": "4px",
                                },
                                "multiValueRemove": Object {
                                  ":active": Object {
                                    "backgroundColor": "#E0E0E0",
                                    "color": "#666666",
                                  },
                                  ":hover": Object {
                                    "color": "#666666",
                                  },
                                },
                                "option": Object {
                                  ":active": Object {
                                    "backgroundColor": "#F5F5F5",
                                    "color": "#336FAB",
                                  },
                                  ":hover": Object {
                                    "backgroundColor": "#CCDBEA",
                                    "color": "#333333",
                                  },
                                  "backgroundColor": "#FFFFFF",
                                  "color": "#333333",
                                  "fontSize": "13px",
                                  "padding": "10px",
                                },
                                "optionCheckbox": Object {
                                  "display": "inline-block",
                                  "position": "relative",
                                  "top": "4px",
                                },
                                "optionCheckmark": Object {
                                  "display": "inline-block",
                                  "height": "12px",
                                  "margin": "0px 5px",
                                  "verticalAlign": "middle",
                                  "width": "12px",
                                },
                                "optionDisabled": Object {
                                  ":hover": Object {
                                    "backgroundColor": "#E0E0E0",
                                    "color": "#666666",
                                  },
                                  "backgroundColor": "#E0E0E0",
                                  "color": "#666666",
                                  "cursor": "not-allowed",
                                },
                                "optionFocused": Object {
                                  "backgroundColor": "#F5F5F5",
                                },
                                "optionSelected": Object {
                                  "backgroundColor": "#F5F5F5",
                                  "color": "#336FAB",
                                  "fontWeight": "bold",
                                },
                                "placeholder": Object {
                                  "color": "#999999",
                                  "fontSize": "13px",
                                },
                                "selectAll": Object {
                                  "padding": "10px",
                                },
                                "validation": Object {
                                  "padding": "10px",
                                  "position": "absolute",
                                  "right": "0px",
                                },
                              },
                            }
                          }
                          value={
                            Array [
                              Object {
                                "isDisabled": false,
                                "label": "reservation-query",
                                "value": "reservation-query",
                              },
                            ]
                          }
                        >
                          <div
                            data-radium={true}
                            style={
                              Object {
                                "cursor": "auto",
                                "display": "inline-block",
                                "width": "100%",
                              }
                            }
                          >
                            <StateManager
                              components={
                                Object {
                                  "IndicatorSeparator": [Function],
                                  "Option": [Function],
                                }
                              }
                              defaultInputValue=""
                              defaultMenuIsOpen={false}
                              defaultValue={null}
                              deselectAllChildren="DESELECT ALL"
                              formatCreateLabel={[Function]}
                              hideSelectedOptions={false}
                              isClearable={true}
                              isDisabled={false}
                              isMulti={false}
                              isSearchable={true}
                              itemMissingLabel="Not in list - Click to Add"
                              maxMenuHeight={180}
                              onChange={[Function]}
                              onCreateOption={[Function]}
                              options={
                                Array [
                                  Object {
                                    "isDisabled": false,
                                    "label": "any",
                                    "value": "any",
                                  },
                                ]
                              }
                              placeholder="Select"
                              selectAllChildren="SELECT ALL"
                              styles={
                                Object {
                                  "clearIndicator": [Function],
                                  "control": [Function],
                                  "dropdownIndicator": [Function],
                                  "input": [Function],
                                  "menu": [Function],
                                  "menuList": [Function],
                                  "menuPortal": [Function],
                                  "multiValue": [Function],
                                  "multiValueLabel": [Function],
                                  "multiValueRemove": [Function],
                                  "option": [Function],
                                  "placeholder": [Function],
                                  "selectAll": [Function],
                                }
                              }
                              value={
                                Array [
                                  Object {
                                    "isDisabled": false,
                                    "label": "reservation-query",
                                    "value": "reservation-query",
                                  },
                                ]
                              }
                            >
                              <Creatable
                                allowCreateWhileLoading={false}
                                components={
                                  Object {
                                    "IndicatorSeparator": [Function],
                                    "Option": [Function],
                                  }
                                }
                                createOptionPosition="last"
                                deselectAllChildren="DESELECT ALL"
                                formatCreateLabel={[Function]}
                                getNewOptionData={[Function]}
                                hideSelectedOptions={false}
                                inputValue=""
                                isClearable={true}
                                isDisabled={false}
                                isMulti={false}
                                isSearchable={true}
                                isValidNewOption={[Function]}
                                itemMissingLabel="Not in list - Click to Add"
                                maxMenuHeight={180}
                                menuIsOpen={false}
                                onChange={[Function]}
                                onCreateOption={[Function]}
                                onInputChange={[Function]}
                                onMenuClose={[Function]}
                                onMenuOpen={[Function]}
                                options={
                                  Array [
                                    Object {
                                      "isDisabled": false,
                                      "label": "any",
                                      "value": "any",
                                    },
                                  ]
                                }
                                placeholder="Select"
                                selectAllChildren="SELECT ALL"
                                styles={
                                  Object {
                                    "clearIndicator": [Function],
                                    "control": [Function],
                                    "dropdownIndicator": [Function],
                                    "input": [Function],
                                    "menu": [Function],
                                    "menuList": [Function],
                                    "menuPortal": [Function],
                                    "multiValue": [Function],
                                    "multiValueLabel": [Function],
                                    "multiValueRemove": [Function],
                                    "option": [Function],
                                    "placeholder": [Function],
                                    "selectAll": [Function],
                                  }
                                }
                                value={
                                  Array [
                                    Object {
                                      "isDisabled": false,
                                      "label": "reservation-query",
                                      "value": "reservation-query",
                                    },
                                  ]
                                }
                              >
                                <Select
                                  allowCreateWhileLoading={false}
                                  backspaceRemovesValue={true}
                                  blurInputOnSelect={true}
                                  captureMenuScroll={false}
                                  closeMenuOnScroll={false}
                                  closeMenuOnSelect={true}
                                  components={
                                    Object {
                                      "IndicatorSeparator": [Function],
                                      "Option": [Function],
                                    }
                                  }
                                  controlShouldRenderValue={true}
                                  createOptionPosition="last"
                                  deselectAllChildren="DESELECT ALL"
                                  escapeClearsValue={false}
                                  filterOption={[Function]}
                                  formatCreateLabel={[Function]}
                                  formatGroupLabel={[Function]}
                                  getNewOptionData={[Function]}
                                  getOptionLabel={[Function]}
                                  getOptionValue={[Function]}
                                  hideSelectedOptions={false}
                                  inputValue=""
                                  isClearable={true}
                                  isDisabled={false}
                                  isLoading={false}
                                  isMulti={false}
                                  isOptionDisabled={[Function]}
                                  isRtl={false}
                                  isSearchable={true}
                                  isValidNewOption={[Function]}
                                  itemMissingLabel="Not in list - Click to Add"
                                  loadingMessage={[Function]}
                                  maxMenuHeight={180}
                                  menuIsOpen={false}
                                  menuPlacement="bottom"
                                  menuPosition="absolute"
                                  menuShouldBlockScroll={false}
                                  menuShouldScrollIntoView={true}
                                  minMenuHeight={140}
                                  noOptionsMessage={[Function]}
                                  onChange={[Function]}
                                  onCreateOption={[Function]}
                                  onInputChange={[Function]}
                                  onMenuClose={[Function]}
                                  onMenuOpen={[Function]}
                                  openMenuOnClick={true}
                                  openMenuOnFocus={false}
                                  options={
                                    Array [
                                      Object {
                                        "isDisabled": false,
                                        "label": "any",
                                        "value": "any",
                                      },
                                    ]
                                  }
                                  pageSize={5}
                                  placeholder="Select"
                                  screenReaderStatus={[Function]}
                                  selectAllChildren="SELECT ALL"
                                  styles={
                                    Object {
                                      "clearIndicator": [Function],
                                      "control": [Function],
                                      "dropdownIndicator": [Function],
                                      "input": [Function],
                                      "menu": [Function],
                                      "menuList": [Function],
                                      "menuPortal": [Function],
                                      "multiValue": [Function],
                                      "multiValueLabel": [Function],
                                      "multiValueRemove": [Function],
                                      "option": [Function],
                                      "placeholder": [Function],
                                      "selectAll": [Function],
                                    }
                                  }
                                  tabIndex="0"
                                  tabSelectsValue={true}
                                  value={
                                    Array [
                                      Object {
                                        "isDisabled": false,
                                        "label": "reservation-query",
                                        "value": "reservation-query",
                                      },
                                    ]
                                  }
                                >
                                  <SelectContainer
                                    clearValue={[Function]}
                                    cx={[Function]}
                                    getStyles={[Function]}
                                    getValue={[Function]}
                                    hasValue={true}
                                    innerProps={
                                      Object {
                                        "id": undefined,
                                        "onKeyDown": [Function],
                                      }
                                    }
                                    isDisabled={false}
                                    isFocused={false}
                                    isMulti={false}
                                    isRtl={false}
                                    options={
                                      Array [
                                        Object {
                                          "isDisabled": false,
                                          "label": "any",
                                          "value": "any",
                                        },
                                      ]
                                    }
                                    selectOption={[Function]}
                                    selectProps={
                                      Object {
                                        "allowCreateWhileLoading": false,
                                        "backspaceRemovesValue": true,
                                        "blurInputOnSelect": true,
                                        "captureMenuScroll": false,
                                        "closeMenuOnScroll": false,
                                        "closeMenuOnSelect": true,
                                        "components": Object {
                                          "IndicatorSeparator": [Function],
                                          "Option": [Function],
                                        },
                                        "controlShouldRenderValue": true,
                                        "createOptionPosition": "last",
                                        "deselectAllChildren": "DESELECT ALL",
                                        "escapeClearsValue": false,
                                        "filterOption": [Function],
                                        "formatCreateLabel": [Function],
                                        "formatGroupLabel": [Function],
                                        "getNewOptionData": [Function],
                                        "getOptionLabel": [Function],
                                        "getOptionValue": [Function],
                                        "handleChange": undefined,
                                        "handleCreate": undefined,
                                        "hideSelectedOptions": false,
                                        "inputValue": "",
                                        "isClearable": true,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "isMulti": false,
                                        "isOptionDisabled": [Function],
                                        "isRtl": false,
                                        "isSearchable": true,
                                        "isValidNewOption": [Function],
                                        "itemMissingLabel": "Not in list - Click to Add",
                                        "loadingMessage": [Function],
                                        "maxMenuHeight": 180,
                                        "menuIsOpen": false,
                                        "menuPlacement": "bottom",
                                        "menuPosition": "absolute",
                                        "menuShouldBlockScroll": false,
                                        "menuShouldScrollIntoView": true,
                                        "minMenuHeight": 140,
                                        "noOptionsMessage": [Function],
                                        "onChange": [Function],
                                        "onCreateOption": [Function],
                                        "onInputChange": [Function],
                                        "onMenuClose": [Function],
                                        "onMenuOpen": [Function],
                                        "openMenuOnClick": true,
                                        "openMenuOnFocus": false,
                                        "options": Array [
                                          Object {
                                            "isDisabled": false,
                                            "label": "any",
                                            "value": "any",
                                          },
                                        ],
                                        "pageSize": 5,
                                        "placeholder": "Select",
                                        "screenReaderStatus": [Function],
                                        "selectAllChildren": "SELECT ALL",
                                        "styles": Object {
                                          "clearIndicator": [Function],
                                          "control": [Function],
                                          "dropdownIndicator": [Function],
                                          "input": [Function],
                                          "menu": [Function],
                                          "menuList": [Function],
                                          "menuPortal": [Function],
                                          "multiValue": [Function],
                                          "multiValueLabel": [Function],
                                          "multiValueRemove": [Function],
                                          "option": [Function],
                                          "placeholder": [Function],
                                          "selectAll": [Function],
                                        },
                                        "tabIndex": "0",
                                        "tabSelectsValue": true,
                                        "value": Array [
                                          Object {
                                            "isDisabled": false,
                                            "label": "reservation-query",
                                            "value": "reservation-query",
                                          },
                                        ],
                                      }
                                    }
                                    setValue={[Function]}
                                    theme={
                                      Object {
                                        "borderRadius": 4,
                                        "colors": Object {
                                          "danger": "#DE350B",
                                          "dangerLight": "#FFBDAD",
                                          "neutral0": "hsl(0, 0%, 100%)",
                                          "neutral10": "hsl(0, 0%, 90%)",
                                          "neutral20": "hsl(0, 0%, 80%)",
                                          "neutral30": "hsl(0, 0%, 70%)",
                                          "neutral40": "hsl(0, 0%, 60%)",
                                          "neutral5": "hsl(0, 0%, 95%)",
                                          "neutral50": "hsl(0, 0%, 50%)",
                                          "neutral60": "hsl(0, 0%, 40%)",
                                          "neutral70": "hsl(0, 0%, 30%)",
                                          "neutral80": "hsl(0, 0%, 20%)",
                                          "neutral90": "hsl(0, 0%, 10%)",
                                          "primary": "#2684FF",
                                          "primary25": "#DEEBFF",
                                          "primary50": "#B2D4FF",
                                          "primary75": "#4C9AFF",
                                        },
                                        "spacing": Object {
                                          "baseUnit": 4,
                                          "controlHeight": 38,
                                          "menuGutter": 8,
                                        },
                                      }
                                    }
                                  >
                                    <ForwardRef(render)
                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                      className=""
                                      css={
                                        Object {
                                          "boxSizing": "border-box",
                                          "direction": null,
                                          "label": "container",
                                          "pointerEvents": null,
                                          "position": "relative",
                                        }
                                      }
                                      onKeyDown={[Function]}
                                    >
                                      <div
                                        className=" css-2b097c-container"
                                        onKeyDown={[Function]}
                                      >
                                        <Control
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={true}
                                          innerProps={
                                            Object {
                                              "onMouseDown": [Function],
                                              "onTouchEnd": [Function],
                                            }
                                          }
                                          innerRef={[Function]}
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={false}
                                          isRtl={false}
                                          menuIsOpen={false}
                                          options={
                                            Array [
                                              Object {
                                                "isDisabled": false,
                                                "label": "any",
                                                "value": "any",
                                              },
                                            ]
                                          }
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "allowCreateWhileLoading": false,
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": true,
                                              "captureMenuScroll": false,
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {
                                                "IndicatorSeparator": [Function],
                                                "Option": [Function],
                                              },
                                              "controlShouldRenderValue": true,
                                              "createOptionPosition": "last",
                                              "deselectAllChildren": "DESELECT ALL",
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatCreateLabel": [Function],
                                              "formatGroupLabel": [Function],
                                              "getNewOptionData": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "handleChange": undefined,
                                              "handleCreate": undefined,
                                              "hideSelectedOptions": false,
                                              "inputValue": "",
                                              "isClearable": true,
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": false,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "isValidNewOption": [Function],
                                              "itemMissingLabel": "Not in list - Click to Add",
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 180,
                                              "menuIsOpen": false,
                                              "menuPlacement": "bottom",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "noOptionsMessage": [Function],
                                              "onChange": [Function],
                                              "onCreateOption": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [
                                                Object {
                                                  "isDisabled": false,
                                                  "label": "any",
                                                  "value": "any",
                                                },
                                              ],
                                              "pageSize": 5,
                                              "placeholder": "Select",
                                              "screenReaderStatus": [Function],
                                              "selectAllChildren": "SELECT ALL",
                                              "styles": Object {
                                                "clearIndicator": [Function],
                                                "control": [Function],
                                                "dropdownIndicator": [Function],
                                                "input": [Function],
                                                "menu": [Function],
                                                "menuList": [Function],
                                                "menuPortal": [Function],
                                                "multiValue": [Function],
                                                "multiValueLabel": [Function],
                                                "multiValueRemove": [Function],
                                                "option": [Function],
                                                "placeholder": [Function],
                                                "selectAll": [Function],
                                              },
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "value": Array [
                                                Object {
                                                  "isDisabled": false,
                                                  "label": "reservation-query",
                                                  "value": "reservation-query",
                                                },
                                              ],
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 4,
                                              "colors": Object {
                                                "danger": "#DE350B",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "hsl(0, 0%, 50%)",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#2684FF",
                                                "primary25": "#DEEBFF",
                                                "primary50": "#B2D4FF",
                                                "primary75": "#4C9AFF",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <ForwardRef(render)
                                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                            className=""
                                            css={
                                              Object {
                                                "&:hover": Object {
                                                  "borderColor": "hsl(0, 0%, 70%)",
                                                },
                                                ":active": Object {
                                                  "border": "1px solid #000000",
                                                },
                                                ":hover": Object {
                                                  "border": "1px solid #000000",
                                                },
                                                "alignItems": "center",
                                                "backgroundColor": "#FFFFFF",
                                                "border": "1px solid #B2B2B2",
                                                "borderColor": "hsl(0, 0%, 80%)",
                                                "borderRadius": "4px",
                                                "borderStyle": "solid",
                                                "borderWidth": 1,
                                                "boxShadow": null,
                                                "boxSizing": "border-box",
                                                "cursor": "default",
                                                "display": "flex",
                                                "flexWrap": "wrap",
                                                "justifyContent": "space-between",
                                                "label": "control",
                                                "minHeight": "40px",
                                                "opacity": 1,
                                                "outline": "0 !important",
                                                "position": "relative",
                                                "transition": "all 100ms",
                                              }
                                            }
                                            onMouseDown={[Function]}
                                            onTouchEnd={[Function]}
                                          >
                                            <div
                                              className=" css-1t1pop9-control"
                                              onMouseDown={[Function]}
                                              onTouchEnd={[Function]}
                                            >
                                              <ValueContainer
                                                clearValue={[Function]}
                                                cx={[Function]}
                                                getStyles={[Function]}
                                                getValue={[Function]}
                                                hasValue={true}
                                                isDisabled={false}
                                                isMulti={false}
                                                isRtl={false}
                                                options={
                                                  Array [
                                                    Object {
                                                      "isDisabled": false,
                                                      "label": "any",
                                                      "value": "any",
                                                    },
                                                  ]
                                                }
                                                selectOption={[Function]}
                                                selectProps={
                                                  Object {
                                                    "allowCreateWhileLoading": false,
                                                    "backspaceRemovesValue": true,
                                                    "blurInputOnSelect": true,
                                                    "captureMenuScroll": false,
                                                    "closeMenuOnScroll": false,
                                                    "closeMenuOnSelect": true,
                                                    "components": Object {
                                                      "IndicatorSeparator": [Function],
                                                      "Option": [Function],
                                                    },
                                                    "controlShouldRenderValue": true,
                                                    "createOptionPosition": "last",
                                                    "deselectAllChildren": "DESELECT ALL",
                                                    "escapeClearsValue": false,
                                                    "filterOption": [Function],
                                                    "formatCreateLabel": [Function],
                                                    "formatGroupLabel": [Function],
                                                    "getNewOptionData": [Function],
                                                    "getOptionLabel": [Function],
                                                    "getOptionValue": [Function],
                                                    "handleChange": undefined,
                                                    "handleCreate": undefined,
                                                    "hideSelectedOptions": false,
                                                    "inputValue": "",
                                                    "isClearable": true,
                                                    "isDisabled": false,
                                                    "isLoading": false,
                                                    "isMulti": false,
                                                    "isOptionDisabled": [Function],
                                                    "isRtl": false,
                                                    "isSearchable": true,
                                                    "isValidNewOption": [Function],
                                                    "itemMissingLabel": "Not in list - Click to Add",
                                                    "loadingMessage": [Function],
                                                    "maxMenuHeight": 180,
                                                    "menuIsOpen": false,
                                                    "menuPlacement": "bottom",
                                                    "menuPosition": "absolute",
                                                    "menuShouldBlockScroll": false,
                                                    "menuShouldScrollIntoView": true,
                                                    "minMenuHeight": 140,
                                                    "noOptionsMessage": [Function],
                                                    "onChange": [Function],
                                                    "onCreateOption": [Function],
                                                    "onInputChange": [Function],
                                                    "onMenuClose": [Function],
                                                    "onMenuOpen": [Function],
                                                    "openMenuOnClick": true,
                                                    "openMenuOnFocus": false,
                                                    "options": Array [
                                                      Object {
                                                        "isDisabled": false,
                                                        "label": "any",
                                                        "value": "any",
                                                      },
                                                    ],
                                                    "pageSize": 5,
                                                    "placeholder": "Select",
                                                    "screenReaderStatus": [Function],
                                                    "selectAllChildren": "SELECT ALL",
                                                    "styles": Object {
                                                      "clearIndicator": [Function],
                                                      "control": [Function],
                                                      "dropdownIndicator": [Function],
                                                      "input": [Function],
                                                      "menu": [Function],
                                                      "menuList": [Function],
                                                      "menuPortal": [Function],
                                                      "multiValue": [Function],
                                                      "multiValueLabel": [Function],
                                                      "multiValueRemove": [Function],
                                                      "option": [Function],
                                                      "placeholder": [Function],
                                                      "selectAll": [Function],
                                                    },
                                                    "tabIndex": "0",
                                                    "tabSelectsValue": true,
                                                    "value": Array [
                                                      Object {
                                                        "isDisabled": false,
                                                        "label": "reservation-query",
                                                        "value": "reservation-query",
                                                      },
                                                    ],
                                                  }
                                                }
                                                setValue={[Function]}
                                                theme={
                                                  Object {
                                                    "borderRadius": 4,
                                                    "colors": Object {
                                                      "danger": "#DE350B",
                                                      "dangerLight": "#FFBDAD",
                                                      "neutral0": "hsl(0, 0%, 100%)",
                                                      "neutral10": "hsl(0, 0%, 90%)",
                                                      "neutral20": "hsl(0, 0%, 80%)",
                                                      "neutral30": "hsl(0, 0%, 70%)",
                                                      "neutral40": "hsl(0, 0%, 60%)",
                                                      "neutral5": "hsl(0, 0%, 95%)",
                                                      "neutral50": "hsl(0, 0%, 50%)",
                                                      "neutral60": "hsl(0, 0%, 40%)",
                                                      "neutral70": "hsl(0, 0%, 30%)",
                                                      "neutral80": "hsl(0, 0%, 20%)",
                                                      "neutral90": "hsl(0, 0%, 10%)",
                                                      "primary": "#2684FF",
                                                      "primary25": "#DEEBFF",
                                                      "primary50": "#B2D4FF",
                                                      "primary75": "#4C9AFF",
                                                    },
                                                    "spacing": Object {
                                                      "baseUnit": 4,
                                                      "controlHeight": 38,
                                                      "menuGutter": 8,
                                                    },
                                                  }
                                                }
                                              >
                                                <ForwardRef(render)
                                                  __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                  className=""
                                                  css={
                                                    Object {
                                                      "WebkitOverflowScrolling": "touch",
                                                      "alignItems": "center",
                                                      "boxSizing": "border-box",
                                                      "display": "flex",
                                                      "flex": 1,
                                                      "flexWrap": "wrap",
                                                      "overflow": "hidden",
                                                      "padding": "2px 8px",
                                                      "position": "relative",
                                                    }
                                                  }
                                                >
                                                  <div
                                                    className=" css-1hwfws3"
                                                  >
                                                    <SingleValue
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      data={
                                                        Object {
                                                          "isDisabled": false,
                                                          "label": "reservation-query",
                                                          "value": "reservation-query",
                                                        }
                                                      }
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={true}
                                                      isDisabled={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "isDisabled": false,
                                                            "label": "any",
                                                            "value": "any",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "allowCreateWhileLoading": false,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "IndicatorSeparator": [Function],
                                                            "Option": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "createOptionPosition": "last",
                                                          "deselectAllChildren": "DESELECT ALL",
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatCreateLabel": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getNewOptionData": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "handleChange": undefined,
                                                          "handleCreate": undefined,
                                                          "hideSelectedOptions": false,
                                                          "inputValue": "",
                                                          "isClearable": true,
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "isValidNewOption": [Function],
                                                          "itemMissingLabel": "Not in list - Click to Add",
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 180,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onCreateOption": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "any",
                                                              "value": "any",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select",
                                                          "screenReaderStatus": [Function],
                                                          "selectAllChildren": "SELECT ALL",
                                                          "styles": Object {
                                                            "clearIndicator": [Function],
                                                            "control": [Function],
                                                            "dropdownIndicator": [Function],
                                                            "input": [Function],
                                                            "menu": [Function],
                                                            "menuList": [Function],
                                                            "menuPortal": [Function],
                                                            "multiValue": [Function],
                                                            "multiValueLabel": [Function],
                                                            "multiValueRemove": [Function],
                                                            "option": [Function],
                                                            "placeholder": [Function],
                                                            "selectAll": [Function],
                                                          },
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "reservation-query",
                                                              "value": "reservation-query",
                                                            },
                                                          ],
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(render)
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className=""
                                                        css={
                                                          Object {
                                                            "boxSizing": "border-box",
                                                            "color": "hsl(0, 0%, 20%)",
                                                            "label": "singleValue",
                                                            "marginLeft": 2,
                                                            "marginRight": 2,
                                                            "maxWidth": "calc(100% - 8px)",
                                                            "overflow": "hidden",
                                                            "position": "absolute",
                                                            "textOverflow": "ellipsis",
                                                            "top": "50%",
                                                            "transform": "translateY(-50%)",
                                                            "whiteSpace": "nowrap",
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className=" css-1uccc91-singleValue"
                                                        >
                                                          reservation-query
                                                        </div>
                                                      </ForwardRef(render)>
                                                    </SingleValue>
                                                    <Input
                                                      aria-autocomplete="list"
                                                      autoCapitalize="none"
                                                      autoComplete="off"
                                                      autoCorrect="off"
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      id="react-select-2-input"
                                                      innerRef={[Function]}
                                                      isDisabled={false}
                                                      isHidden={false}
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "allowCreateWhileLoading": false,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "IndicatorSeparator": [Function],
                                                            "Option": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "createOptionPosition": "last",
                                                          "deselectAllChildren": "DESELECT ALL",
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatCreateLabel": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getNewOptionData": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "handleChange": undefined,
                                                          "handleCreate": undefined,
                                                          "hideSelectedOptions": false,
                                                          "inputValue": "",
                                                          "isClearable": true,
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "isValidNewOption": [Function],
                                                          "itemMissingLabel": "Not in list - Click to Add",
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 180,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onCreateOption": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "any",
                                                              "value": "any",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select",
                                                          "screenReaderStatus": [Function],
                                                          "selectAllChildren": "SELECT ALL",
                                                          "styles": Object {
                                                            "clearIndicator": [Function],
                                                            "control": [Function],
                                                            "dropdownIndicator": [Function],
                                                            "input": [Function],
                                                            "menu": [Function],
                                                            "menuList": [Function],
                                                            "menuPortal": [Function],
                                                            "multiValue": [Function],
                                                            "multiValueLabel": [Function],
                                                            "multiValueRemove": [Function],
                                                            "option": [Function],
                                                            "placeholder": [Function],
                                                            "selectAll": [Function],
                                                          },
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "reservation-query",
                                                              "value": "reservation-query",
                                                            },
                                                          ],
                                                        }
                                                      }
                                                      spellCheck="false"
                                                      tabIndex="0"
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                      type="text"
                                                      value=""
                                                    >
                                                      <ForwardRef(render)
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        css={
                                                          Object {
                                                            "boxSizing": "border-box",
                                                            "color": "#333333",
                                                            "fontSize": "13px",
                                                            "margin": 2,
                                                            "paddingBottom": 2,
                                                            "paddingTop": 2,
                                                            "visibility": "visible",
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className="css-1m6xr1n"
                                                        >
                                                          <AutosizeInput
                                                            aria-autocomplete="list"
                                                            autoCapitalize="none"
                                                            autoComplete="off"
                                                            autoCorrect="off"
                                                            className=""
                                                            disabled={false}
                                                            id="react-select-2-input"
                                                            injectStyles={true}
                                                            inputRef={[Function]}
                                                            inputStyle={
                                                              Object {
                                                                "background": 0,
                                                                "border": 0,
                                                                "color": "inherit",
                                                                "fontSize": "inherit",
                                                                "label": "input",
                                                                "opacity": 1,
                                                                "outline": 0,
                                                                "padding": 0,
                                                              }
                                                            }
                                                            minWidth={1}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            spellCheck="false"
                                                            tabIndex="0"
                                                            type="text"
                                                            value=""
                                                          >
                                                            <div
                                                              className=""
                                                              style={
                                                                Object {
                                                                  "display": "inline-block",
                                                                }
                                                              }
                                                            >
                                                              <input
                                                                aria-autocomplete="list"
                                                                autoCapitalize="none"
                                                                autoComplete="off"
                                                                autoCorrect="off"
                                                                disabled={false}
                                                                id="react-select-2-input"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                spellCheck="false"
                                                                style={
                                                                  Object {
                                                                    "background": 0,
                                                                    "border": 0,
                                                                    "boxSizing": "content-box",
                                                                    "color": "inherit",
                                                                    "fontSize": "inherit",
                                                                    "label": "input",
                                                                    "opacity": 1,
                                                                    "outline": 0,
                                                                    "padding": 0,
                                                                    "width": "2px",
                                                                  }
                                                                }
                                                                tabIndex="0"
                                                                type="text"
                                                                value=""
                                                              />
                                                              <div
                                                                style={
                                                                  Object {
                                                                    "height": 0,
                                                                    "left": 0,
                                                                    "overflow": "scroll",
                                                                    "position": "absolute",
                                                                    "top": 0,
                                                                    "visibility": "hidden",
                                                                    "whiteSpace": "pre",
                                                                  }
                                                                }
                                                              />
                                                            </div>
                                                          </AutosizeInput>
                                                        </div>
                                                      </ForwardRef(render)>
                                                    </Input>
                                                  </div>
                                                </ForwardRef(render)>
                                              </ValueContainer>
                                              <IndicatorsContainer
                                                clearValue={[Function]}
                                                cx={[Function]}
                                                getStyles={[Function]}
                                                getValue={[Function]}
                                                hasValue={true}
                                                isDisabled={false}
                                                isMulti={false}
                                                isRtl={false}
                                                options={
                                                  Array [
                                                    Object {
                                                      "isDisabled": false,
                                                      "label": "any",
                                                      "value": "any",
                                                    },
                                                  ]
                                                }
                                                selectOption={[Function]}
                                                selectProps={
                                                  Object {
                                                    "allowCreateWhileLoading": false,
                                                    "backspaceRemovesValue": true,
                                                    "blurInputOnSelect": true,
                                                    "captureMenuScroll": false,
                                                    "closeMenuOnScroll": false,
                                                    "closeMenuOnSelect": true,
                                                    "components": Object {
                                                      "IndicatorSeparator": [Function],
                                                      "Option": [Function],
                                                    },
                                                    "controlShouldRenderValue": true,
                                                    "createOptionPosition": "last",
                                                    "deselectAllChildren": "DESELECT ALL",
                                                    "escapeClearsValue": false,
                                                    "filterOption": [Function],
                                                    "formatCreateLabel": [Function],
                                                    "formatGroupLabel": [Function],
                                                    "getNewOptionData": [Function],
                                                    "getOptionLabel": [Function],
                                                    "getOptionValue": [Function],
                                                    "handleChange": undefined,
                                                    "handleCreate": undefined,
                                                    "hideSelectedOptions": false,
                                                    "inputValue": "",
                                                    "isClearable": true,
                                                    "isDisabled": false,
                                                    "isLoading": false,
                                                    "isMulti": false,
                                                    "isOptionDisabled": [Function],
                                                    "isRtl": false,
                                                    "isSearchable": true,
                                                    "isValidNewOption": [Function],
                                                    "itemMissingLabel": "Not in list - Click to Add",
                                                    "loadingMessage": [Function],
                                                    "maxMenuHeight": 180,
                                                    "menuIsOpen": false,
                                                    "menuPlacement": "bottom",
                                                    "menuPosition": "absolute",
                                                    "menuShouldBlockScroll": false,
                                                    "menuShouldScrollIntoView": true,
                                                    "minMenuHeight": 140,
                                                    "noOptionsMessage": [Function],
                                                    "onChange": [Function],
                                                    "onCreateOption": [Function],
                                                    "onInputChange": [Function],
                                                    "onMenuClose": [Function],
                                                    "onMenuOpen": [Function],
                                                    "openMenuOnClick": true,
                                                    "openMenuOnFocus": false,
                                                    "options": Array [
                                                      Object {
                                                        "isDisabled": false,
                                                        "label": "any",
                                                        "value": "any",
                                                      },
                                                    ],
                                                    "pageSize": 5,
                                                    "placeholder": "Select",
                                                    "screenReaderStatus": [Function],
                                                    "selectAllChildren": "SELECT ALL",
                                                    "styles": Object {
                                                      "clearIndicator": [Function],
                                                      "control": [Function],
                                                      "dropdownIndicator": [Function],
                                                      "input": [Function],
                                                      "menu": [Function],
                                                      "menuList": [Function],
                                                      "menuPortal": [Function],
                                                      "multiValue": [Function],
                                                      "multiValueLabel": [Function],
                                                      "multiValueRemove": [Function],
                                                      "option": [Function],
                                                      "placeholder": [Function],
                                                      "selectAll": [Function],
                                                    },
                                                    "tabIndex": "0",
                                                    "tabSelectsValue": true,
                                                    "value": Array [
                                                      Object {
                                                        "isDisabled": false,
                                                        "label": "reservation-query",
                                                        "value": "reservation-query",
                                                      },
                                                    ],
                                                  }
                                                }
                                                setValue={[Function]}
                                                theme={
                                                  Object {
                                                    "borderRadius": 4,
                                                    "colors": Object {
                                                      "danger": "#DE350B",
                                                      "dangerLight": "#FFBDAD",
                                                      "neutral0": "hsl(0, 0%, 100%)",
                                                      "neutral10": "hsl(0, 0%, 90%)",
                                                      "neutral20": "hsl(0, 0%, 80%)",
                                                      "neutral30": "hsl(0, 0%, 70%)",
                                                      "neutral40": "hsl(0, 0%, 60%)",
                                                      "neutral5": "hsl(0, 0%, 95%)",
                                                      "neutral50": "hsl(0, 0%, 50%)",
                                                      "neutral60": "hsl(0, 0%, 40%)",
                                                      "neutral70": "hsl(0, 0%, 30%)",
                                                      "neutral80": "hsl(0, 0%, 20%)",
                                                      "neutral90": "hsl(0, 0%, 10%)",
                                                      "primary": "#2684FF",
                                                      "primary25": "#DEEBFF",
                                                      "primary50": "#B2D4FF",
                                                      "primary75": "#4C9AFF",
                                                    },
                                                    "spacing": Object {
                                                      "baseUnit": 4,
                                                      "controlHeight": 38,
                                                      "menuGutter": 8,
                                                    },
                                                  }
                                                }
                                              >
                                                <ForwardRef(render)
                                                  __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                  className=""
                                                  css={
                                                    Object {
                                                      "alignItems": "center",
                                                      "alignSelf": "stretch",
                                                      "boxSizing": "border-box",
                                                      "display": "flex",
                                                      "flexShrink": 0,
                                                    }
                                                  }
                                                >
                                                  <div
                                                    className=" css-1wy0on6"
                                                  >
                                                    <ClearIndicator
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={true}
                                                      innerProps={
                                                        Object {
                                                          "aria-hidden": "true",
                                                          "onMouseDown": [Function],
                                                          "onTouchEnd": [Function],
                                                        }
                                                      }
                                                      isFocused={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "isDisabled": false,
                                                            "label": "any",
                                                            "value": "any",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "allowCreateWhileLoading": false,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "IndicatorSeparator": [Function],
                                                            "Option": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "createOptionPosition": "last",
                                                          "deselectAllChildren": "DESELECT ALL",
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatCreateLabel": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getNewOptionData": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "handleChange": undefined,
                                                          "handleCreate": undefined,
                                                          "hideSelectedOptions": false,
                                                          "inputValue": "",
                                                          "isClearable": true,
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "isValidNewOption": [Function],
                                                          "itemMissingLabel": "Not in list - Click to Add",
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 180,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onCreateOption": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "any",
                                                              "value": "any",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select",
                                                          "screenReaderStatus": [Function],
                                                          "selectAllChildren": "SELECT ALL",
                                                          "styles": Object {
                                                            "clearIndicator": [Function],
                                                            "control": [Function],
                                                            "dropdownIndicator": [Function],
                                                            "input": [Function],
                                                            "menu": [Function],
                                                            "menuList": [Function],
                                                            "menuPortal": [Function],
                                                            "multiValue": [Function],
                                                            "multiValueLabel": [Function],
                                                            "multiValueRemove": [Function],
                                                            "option": [Function],
                                                            "placeholder": [Function],
                                                            "selectAll": [Function],
                                                          },
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "reservation-query",
                                                              "value": "reservation-query",
                                                            },
                                                          ],
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(render)
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        aria-hidden="true"
                                                        className=""
                                                        css={
                                                          Object {
                                                            ":hover": Object {
                                                              "color": "hsl(0, 0%, 60%)",
                                                            },
                                                            "boxSizing": "border-box",
                                                            "color": "hsl(0, 0%, 80%)",
                                                            "display": "none",
                                                            "label": "indicatorContainer",
                                                            "padding": 8,
                                                            "transition": "color 150ms",
                                                          }
                                                        }
                                                        onMouseDown={[Function]}
                                                        onTouchEnd={[Function]}
                                                      >
                                                        <div
                                                          aria-hidden="true"
                                                          className=" css-tpaeio-indicatorContainer"
                                                          onMouseDown={[Function]}
                                                          onTouchEnd={[Function]}
                                                        >
                                                          <CrossIcon>
                                                            <Svg
                                                              size={20}
                                                            >
                                                              <ForwardRef(render)
                                                                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                                aria-hidden="true"
                                                                css={
                                                                  Object {
                                                                    "name": "19bqh2r",
                                                                    "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;",
                                                                  }
                                                                }
                                                                focusable="false"
                                                                height={20}
                                                                viewBox="0 0 20 20"
                                                                width={20}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="css-19bqh2r"
                                                                  focusable="false"
                                                                  height={20}
                                                                  viewBox="0 0 20 20"
                                                                  width={20}
                                                                >
                                                                  <path
                                                                    d="M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
                                                                  />
                                                                </svg>
                                                              </ForwardRef(render)>
                                                            </Svg>
                                                          </CrossIcon>
                                                        </div>
                                                      </ForwardRef(render)>
                                                    </ClearIndicator>
                                                    <IndicatorSeparator
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={true}
                                                      isDisabled={false}
                                                      isFocused={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "isDisabled": false,
                                                            "label": "any",
                                                            "value": "any",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "allowCreateWhileLoading": false,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "IndicatorSeparator": [Function],
                                                            "Option": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "createOptionPosition": "last",
                                                          "deselectAllChildren": "DESELECT ALL",
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatCreateLabel": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getNewOptionData": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "handleChange": undefined,
                                                          "handleCreate": undefined,
                                                          "hideSelectedOptions": false,
                                                          "inputValue": "",
                                                          "isClearable": true,
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "isValidNewOption": [Function],
                                                          "itemMissingLabel": "Not in list - Click to Add",
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 180,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onCreateOption": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "any",
                                                              "value": "any",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select",
                                                          "screenReaderStatus": [Function],
                                                          "selectAllChildren": "SELECT ALL",
                                                          "styles": Object {
                                                            "clearIndicator": [Function],
                                                            "control": [Function],
                                                            "dropdownIndicator": [Function],
                                                            "input": [Function],
                                                            "menu": [Function],
                                                            "menuList": [Function],
                                                            "menuPortal": [Function],
                                                            "multiValue": [Function],
                                                            "multiValueLabel": [Function],
                                                            "multiValueRemove": [Function],
                                                            "option": [Function],
                                                            "placeholder": [Function],
                                                            "selectAll": [Function],
                                                          },
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "reservation-query",
                                                              "value": "reservation-query",
                                                            },
                                                          ],
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    />
                                                    <DropdownIndicator
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={true}
                                                      innerProps={
                                                        Object {
                                                          "aria-hidden": "true",
                                                          "onMouseDown": [Function],
                                                          "onTouchEnd": [Function],
                                                        }
                                                      }
                                                      isDisabled={false}
                                                      isFocused={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "isDisabled": false,
                                                            "label": "any",
                                                            "value": "any",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "allowCreateWhileLoading": false,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "IndicatorSeparator": [Function],
                                                            "Option": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "createOptionPosition": "last",
                                                          "deselectAllChildren": "DESELECT ALL",
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatCreateLabel": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getNewOptionData": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "handleChange": undefined,
                                                          "handleCreate": undefined,
                                                          "hideSelectedOptions": false,
                                                          "inputValue": "",
                                                          "isClearable": true,
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "isValidNewOption": [Function],
                                                          "itemMissingLabel": "Not in list - Click to Add",
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 180,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onCreateOption": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "any",
                                                              "value": "any",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select",
                                                          "screenReaderStatus": [Function],
                                                          "selectAllChildren": "SELECT ALL",
                                                          "styles": Object {
                                                            "clearIndicator": [Function],
                                                            "control": [Function],
                                                            "dropdownIndicator": [Function],
                                                            "input": [Function],
                                                            "menu": [Function],
                                                            "menuList": [Function],
                                                            "menuPortal": [Function],
                                                            "multiValue": [Function],
                                                            "multiValueLabel": [Function],
                                                            "multiValueRemove": [Function],
                                                            "option": [Function],
                                                            "placeholder": [Function],
                                                            "selectAll": [Function],
                                                          },
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": Array [
                                                            Object {
                                                              "isDisabled": false,
                                                              "label": "reservation-query",
                                                              "value": "reservation-query",
                                                            },
                                                          ],
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(render)
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        aria-hidden="true"
                                                        className=""
                                                        css={
                                                          Object {
                                                            ":hover": Object {
                                                              "color": "hsl(0, 0%, 60%)",
                                                            },
                                                            "boxSizing": "border-box",
                                                            "color": "#333333",
                                                            "display": "flex",
                                                            "label": "indicatorContainer",
                                                            "padding": 8,
                                                            "transition": "color 150ms",
                                                          }
                                                        }
                                                        onMouseDown={[Function]}
                                                        onTouchEnd={[Function]}
                                                      >
                                                        <div
                                                          aria-hidden="true"
                                                          className=" css-hmgdr5-indicatorContainer"
                                                          onMouseDown={[Function]}
                                                          onTouchEnd={[Function]}
                                                        >
                                                          <DownChevron>
                                                            <Svg
                                                              size={20}
                                                            >
                                                              <ForwardRef(render)
                                                                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                                aria-hidden="true"
                                                                css={
                                                                  Object {
                                                                    "name": "19bqh2r",
                                                                    "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;",
                                                                  }
                                                                }
                                                                focusable="false"
                                                                height={20}
                                                                viewBox="0 0 20 20"
                                                                width={20}
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="css-19bqh2r"
                                                                  focusable="false"
                                                                  height={20}
                                                                  viewBox="0 0 20 20"
                                                                  width={20}
                                                                >
                                                                  <path
                                                                    d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                                                  />
                                                                </svg>
                                                              </ForwardRef(render)>
                                                            </Svg>
                                                          </DownChevron>
                                                        </div>
                                                      </ForwardRef(render)>
                                                    </DropdownIndicator>
                                                  </div>
                                                </ForwardRef(render)>
                                              </IndicatorsContainer>
                                            </div>
                                          </ForwardRef(render)>
                                        </Control>
                                      </div>
                                    </ForwardRef(render)>
                                  </SelectContainer>
                                </Select>
                              </Creatable>
                            </StateManager>
                          </div>
                        </CreatableSelect>
                      </withTheme(CreatableSelect)>
                    </li>
                    <li
                      data-radium={true}
                      key=".2"
                    >
                      <label
                        key=".0"
                      >
                        Intent Replacement*
                      </label>
                      <withTheme(Select)
                        isClearable={true}
                        isDisabled={false}
                        isSearchable={true}
                        key=".1"
                        onChange={[Function]}
                        options={Array []}
                        styleOverride={
                          Object {
                            "container": Object {
                              "width": "100%",
                            },
                          }
                        }
                        value={
                          Object {
                            "isDisabled": false,
                            "label": "reservation-make",
                            "value": "reservation-make",
                          }
                        }
                      >
                        <Select
                          allowSelectAll={false}
                          deselectAllChildren="UNSELECT ALL"
                          hideSelectedOptions={false}
                          isClearable={true}
                          isDisabled={false}
                          isMulti={false}
                          isSearchable={true}
                          maxMenuHeight={180}
                          onChange={[Function]}
                          options={Array []}
                          placeholder="Select"
                          selectAllChildren="SELECT ALL"
                          styleOverride={
                            Object {
                              "container": Object {
                                "width": "100%",
                              },
                            }
                          }
                          tfsStyle={
                            Object {
                              "select": Object {
                                "clearIndicator": Object {
                                  "display": "none",
                                },
                                "container": Object {
                                  "cursor": "auto",
                                  "display": "inline-block",
                                  "width": "250px",
                                },
                                "control": Object {
                                  ":active": Object {
                                    "border": "1px solid #000000",
                                  },
                                  ":hover": Object {
                                    "border": "1px solid #000000",
                                  },
                                  "backgroundColor": "#FFFFFF",
                                  "border": "1px solid #B2B2B2",
                                  "borderRadius": "4px",
                                  "minHeight": "40px",
                                  "opacity": 1,
                                },
                                "createNew": Object {
                                  "input": Object {
                                    "display": "inline-block",
                                  },
                                  "label": Object {
                                    "margin": "5px auto",
                                    "textAlign": "center",
                                  },
                                },
                                "dropdownIndicator": Object {
                                  "color": "#333333",
                                },
                                "input": Object {
                                  ":active": Object {
                                    "border": "1px solid #000000",
                                  },
                                  ":focus": Object {
                                    "border": "2px solid #B2B2B2",
                                  },
                                  ":hover": Object {
                                    "border": "2px solid #000000",
                                  },
                                  "backgroundColor": "#FFFFFF",
                                  "border": "1px solid #B2B2B2",
                                  "borderRadius": "4px",
                                  "boxSizing": "border-box",
                                  "height": "40px",
                                  "margin": "0px",
                                  "opacity": 1,
                                  "outline": "none",
                                  "padding": "8px",
                                  "width": "100%",
                                },
                                "inputBox": Object {
                                  "color": "#333333",
                                  "fontSize": "13px",
                                },
                                "menu": Object {
                                  "borderRadius": "0px",
                                  "marginTop": "5px",
                                },
                                "menuList": Object {
                                  "paddingBottom": "0px",
                                  "paddingTop": "0px",
                                },
                                "multiValue": Object {
                                  "borderRadius": "4px",
                                  "color": "#999999",
                                  "fontSize": "13px",
                                  "margin": "5px 12px 5px 0px",
                                },
                                "multiValueLabel": Object {
                                  "backgroundColor": "inherit",
                                  "borderRadius": "4px",
                                },
                                "multiValueRemove": Object {
                                  ":active": Object {
                                    "backgroundColor": "#E0E0E0",
                                    "color": "#666666",
                                  },
                                  ":hover": Object {
                                    "color": "#666666",
                                  },
                                },
                                "option": Object {
                                  ":active": Object {
                                    "backgroundColor": "#F5F5F5",
                                    "color": "#336FAB",
                                  },
                                  ":hover": Object {
                                    "backgroundColor": "#CCDBEA",
                                    "color": "#333333",
                                  },
                                  "backgroundColor": "#FFFFFF",
                                  "color": "#333333",
                                  "fontSize": "13px",
                                  "padding": "10px",
                                },
                                "optionCheckbox": Object {
                                  "display": "inline-block",
                                  "position": "relative",
                                  "top": "4px",
                                },
                                "optionCheckmark": Object {
                                  "display": "inline-block",
                                  "height": "12px",
                                  "margin": "0px 5px",
                                  "verticalAlign": "middle",
                                  "width": "12px",
                                },
                                "optionDisabled": Object {
                                  ":hover": Object {
                                    "backgroundColor": "#E0E0E0",
                                    "color": "#666666",
                                  },
                                  "backgroundColor": "#E0E0E0",
                                  "color": "#666666",
                                  "cursor": "not-allowed",
                                },
                                "optionFocused": Object {
                                  "backgroundColor": "#F5F5F5",
                                },
                                "optionSelected": Object {
                                  "backgroundColor": "#F5F5F5",
                                  "color": "#336FAB",
                                  "fontWeight": "bold",
                                },
                                "placeholder": Object {
                                  "color": "#999999",
                                  "fontSize": "13px",
                                },
                                "selectAll": Object {
                                  "padding": "10px",
                                },
                                "validation": Object {
                                  "padding": "10px",
                                  "position": "absolute",
                                  "right": "0px",
                                },
                              },
                            }
                          }
                          value={
                            Object {
                              "isDisabled": false,
                              "label": "reservation-make",
                              "value": "reservation-make",
                            }
                          }
                        >
                          <div
                            data-radium={true}
                            style={
                              Object {
                                "cursor": "auto",
                                "display": "inline-block",
                                "width": "100%",
                              }
                            }
                          >
                            <StateManager
                              components={
                                Object {
                                  "IndicatorSeparator": [Function],
                                  "Option": [Function],
                                }
                              }
                              defaultInputValue=""
                              defaultMenuIsOpen={false}
                              defaultValue={null}
                              deselectAllChildren="UNSELECT ALL"
                              hideSelectedOptions={false}
                              isClearable={true}
                              isDisabled={false}
                              isMulti={false}
                              isSearchable={true}
                              maxMenuHeight={180}
                              onChange={[Function]}
                              options={Array []}
                              placeholder="Select"
                              selectAllChildren="SELECT ALL"
                              styles={
                                Object {
                                  "clearIndicator": [Function],
                                  "control": [Function],
                                  "dropdownIndicator": [Function],
                                  "input": [Function],
                                  "menu": [Function],
                                  "menuList": [Function],
                                  "menuPortal": [Function],
                                  "multiValue": [Function],
                                  "multiValueLabel": [Function],
                                  "multiValueRemove": [Function],
                                  "option": [Function],
                                  "placeholder": [Function],
                                  "selectAll": [Function],
                                }
                              }
                              value={
                                Object {
                                  "isDisabled": false,
                                  "label": "reservation-make",
                                  "value": "reservation-make",
                                }
                              }
                            >
                              <Select
                                backspaceRemovesValue={true}
                                blurInputOnSelect={true}
                                captureMenuScroll={false}
                                closeMenuOnScroll={false}
                                closeMenuOnSelect={true}
                                components={
                                  Object {
                                    "IndicatorSeparator": [Function],
                                    "Option": [Function],
                                  }
                                }
                                controlShouldRenderValue={true}
                                deselectAllChildren="UNSELECT ALL"
                                escapeClearsValue={false}
                                filterOption={[Function]}
                                formatGroupLabel={[Function]}
                                getOptionLabel={[Function]}
                                getOptionValue={[Function]}
                                hideSelectedOptions={false}
                                inputValue=""
                                isClearable={true}
                                isDisabled={false}
                                isLoading={false}
                                isMulti={false}
                                isOptionDisabled={[Function]}
                                isRtl={false}
                                isSearchable={true}
                                loadingMessage={[Function]}
                                maxMenuHeight={180}
                                menuIsOpen={false}
                                menuPlacement="bottom"
                                menuPosition="absolute"
                                menuShouldBlockScroll={false}
                                menuShouldScrollIntoView={true}
                                minMenuHeight={140}
                                noOptionsMessage={[Function]}
                                onChange={[Function]}
                                onInputChange={[Function]}
                                onMenuClose={[Function]}
                                onMenuOpen={[Function]}
                                openMenuOnClick={true}
                                openMenuOnFocus={false}
                                options={Array []}
                                pageSize={5}
                                placeholder="Select"
                                screenReaderStatus={[Function]}
                                selectAllChildren="SELECT ALL"
                                styles={
                                  Object {
                                    "clearIndicator": [Function],
                                    "control": [Function],
                                    "dropdownIndicator": [Function],
                                    "input": [Function],
                                    "menu": [Function],
                                    "menuList": [Function],
                                    "menuPortal": [Function],
                                    "multiValue": [Function],
                                    "multiValueLabel": [Function],
                                    "multiValueRemove": [Function],
                                    "option": [Function],
                                    "placeholder": [Function],
                                    "selectAll": [Function],
                                  }
                                }
                                tabIndex="0"
                                tabSelectsValue={true}
                                value={
                                  Object {
                                    "isDisabled": false,
                                    "label": "reservation-make",
                                    "value": "reservation-make",
                                  }
                                }
                              >
                                <SelectContainer
                                  clearValue={[Function]}
                                  cx={[Function]}
                                  getStyles={[Function]}
                                  getValue={[Function]}
                                  hasValue={true}
                                  innerProps={
                                    Object {
                                      "id": undefined,
                                      "onKeyDown": [Function],
                                    }
                                  }
                                  isDisabled={false}
                                  isFocused={false}
                                  isMulti={false}
                                  isRtl={false}
                                  options={Array []}
                                  selectOption={[Function]}
                                  selectProps={
                                    Object {
                                      "backspaceRemovesValue": true,
                                      "blurInputOnSelect": true,
                                      "captureMenuScroll": false,
                                      "closeMenuOnScroll": false,
                                      "closeMenuOnSelect": true,
                                      "components": Object {
                                        "IndicatorSeparator": [Function],
                                        "Option": [Function],
                                      },
                                      "controlShouldRenderValue": true,
                                      "deselectAllChildren": "UNSELECT ALL",
                                      "escapeClearsValue": false,
                                      "filterOption": [Function],
                                      "formatGroupLabel": [Function],
                                      "getOptionLabel": [Function],
                                      "getOptionValue": [Function],
                                      "hideSelectedOptions": false,
                                      "inputValue": "",
                                      "isClearable": true,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "isMulti": false,
                                      "isOptionDisabled": [Function],
                                      "isRtl": false,
                                      "isSearchable": true,
                                      "loadingMessage": [Function],
                                      "maxMenuHeight": 180,
                                      "menuIsOpen": false,
                                      "menuPlacement": "bottom",
                                      "menuPosition": "absolute",
                                      "menuShouldBlockScroll": false,
                                      "menuShouldScrollIntoView": true,
                                      "minMenuHeight": 140,
                                      "noOptionsMessage": [Function],
                                      "onChange": [Function],
                                      "onInputChange": [Function],
                                      "onMenuClose": [Function],
                                      "onMenuOpen": [Function],
                                      "openMenuOnClick": true,
                                      "openMenuOnFocus": false,
                                      "options": Array [],
                                      "pageSize": 5,
                                      "placeholder": "Select",
                                      "screenReaderStatus": [Function],
                                      "selectAllChildren": "SELECT ALL",
                                      "styles": Object {
                                        "clearIndicator": [Function],
                                        "control": [Function],
                                        "dropdownIndicator": [Function],
                                        "input": [Function],
                                        "menu": [Function],
                                        "menuList": [Function],
                                        "menuPortal": [Function],
                                        "multiValue": [Function],
                                        "multiValueLabel": [Function],
                                        "multiValueRemove": [Function],
                                        "option": [Function],
                                        "placeholder": [Function],
                                        "selectAll": [Function],
                                      },
                                      "tabIndex": "0",
                                      "tabSelectsValue": true,
                                      "value": Object {
                                        "isDisabled": false,
                                        "label": "reservation-make",
                                        "value": "reservation-make",
                                      },
                                    }
                                  }
                                  setValue={[Function]}
                                  theme={
                                    Object {
                                      "borderRadius": 4,
                                      "colors": Object {
                                        "danger": "#DE350B",
                                        "dangerLight": "#FFBDAD",
                                        "neutral0": "hsl(0, 0%, 100%)",
                                        "neutral10": "hsl(0, 0%, 90%)",
                                        "neutral20": "hsl(0, 0%, 80%)",
                                        "neutral30": "hsl(0, 0%, 70%)",
                                        "neutral40": "hsl(0, 0%, 60%)",
                                        "neutral5": "hsl(0, 0%, 95%)",
                                        "neutral50": "hsl(0, 0%, 50%)",
                                        "neutral60": "hsl(0, 0%, 40%)",
                                        "neutral70": "hsl(0, 0%, 30%)",
                                        "neutral80": "hsl(0, 0%, 20%)",
                                        "neutral90": "hsl(0, 0%, 10%)",
                                        "primary": "#2684FF",
                                        "primary25": "#DEEBFF",
                                        "primary50": "#B2D4FF",
                                        "primary75": "#4C9AFF",
                                      },
                                      "spacing": Object {
                                        "baseUnit": 4,
                                        "controlHeight": 38,
                                        "menuGutter": 8,
                                      },
                                    }
                                  }
                                >
                                  <ForwardRef(render)
                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                    className=""
                                    css={
                                      Object {
                                        "boxSizing": "border-box",
                                        "direction": null,
                                        "label": "container",
                                        "pointerEvents": null,
                                        "position": "relative",
                                      }
                                    }
                                    onKeyDown={[Function]}
                                  >
                                    <div
                                      className=" css-2b097c-container"
                                      onKeyDown={[Function]}
                                    >
                                      <Control
                                        clearValue={[Function]}
                                        cx={[Function]}
                                        getStyles={[Function]}
                                        getValue={[Function]}
                                        hasValue={true}
                                        innerProps={
                                          Object {
                                            "onMouseDown": [Function],
                                            "onTouchEnd": [Function],
                                          }
                                        }
                                        innerRef={[Function]}
                                        isDisabled={false}
                                        isFocused={false}
                                        isMulti={false}
                                        isRtl={false}
                                        menuIsOpen={false}
                                        options={Array []}
                                        selectOption={[Function]}
                                        selectProps={
                                          Object {
                                            "backspaceRemovesValue": true,
                                            "blurInputOnSelect": true,
                                            "captureMenuScroll": false,
                                            "closeMenuOnScroll": false,
                                            "closeMenuOnSelect": true,
                                            "components": Object {
                                              "IndicatorSeparator": [Function],
                                              "Option": [Function],
                                            },
                                            "controlShouldRenderValue": true,
                                            "deselectAllChildren": "UNSELECT ALL",
                                            "escapeClearsValue": false,
                                            "filterOption": [Function],
                                            "formatGroupLabel": [Function],
                                            "getOptionLabel": [Function],
                                            "getOptionValue": [Function],
                                            "hideSelectedOptions": false,
                                            "inputValue": "",
                                            "isClearable": true,
                                            "isDisabled": false,
                                            "isLoading": false,
                                            "isMulti": false,
                                            "isOptionDisabled": [Function],
                                            "isRtl": false,
                                            "isSearchable": true,
                                            "loadingMessage": [Function],
                                            "maxMenuHeight": 180,
                                            "menuIsOpen": false,
                                            "menuPlacement": "bottom",
                                            "menuPosition": "absolute",
                                            "menuShouldBlockScroll": false,
                                            "menuShouldScrollIntoView": true,
                                            "minMenuHeight": 140,
                                            "noOptionsMessage": [Function],
                                            "onChange": [Function],
                                            "onInputChange": [Function],
                                            "onMenuClose": [Function],
                                            "onMenuOpen": [Function],
                                            "openMenuOnClick": true,
                                            "openMenuOnFocus": false,
                                            "options": Array [],
                                            "pageSize": 5,
                                            "placeholder": "Select",
                                            "screenReaderStatus": [Function],
                                            "selectAllChildren": "SELECT ALL",
                                            "styles": Object {
                                              "clearIndicator": [Function],
                                              "control": [Function],
                                              "dropdownIndicator": [Function],
                                              "input": [Function],
                                              "menu": [Function],
                                              "menuList": [Function],
                                              "menuPortal": [Function],
                                              "multiValue": [Function],
                                              "multiValueLabel": [Function],
                                              "multiValueRemove": [Function],
                                              "option": [Function],
                                              "placeholder": [Function],
                                              "selectAll": [Function],
                                            },
                                            "tabIndex": "0",
                                            "tabSelectsValue": true,
                                            "value": Object {
                                              "isDisabled": false,
                                              "label": "reservation-make",
                                              "value": "reservation-make",
                                            },
                                          }
                                        }
                                        setValue={[Function]}
                                        theme={
                                          Object {
                                            "borderRadius": 4,
                                            "colors": Object {
                                              "danger": "#DE350B",
                                              "dangerLight": "#FFBDAD",
                                              "neutral0": "hsl(0, 0%, 100%)",
                                              "neutral10": "hsl(0, 0%, 90%)",
                                              "neutral20": "hsl(0, 0%, 80%)",
                                              "neutral30": "hsl(0, 0%, 70%)",
                                              "neutral40": "hsl(0, 0%, 60%)",
                                              "neutral5": "hsl(0, 0%, 95%)",
                                              "neutral50": "hsl(0, 0%, 50%)",
                                              "neutral60": "hsl(0, 0%, 40%)",
                                              "neutral70": "hsl(0, 0%, 30%)",
                                              "neutral80": "hsl(0, 0%, 20%)",
                                              "neutral90": "hsl(0, 0%, 10%)",
                                              "primary": "#2684FF",
                                              "primary25": "#DEEBFF",
                                              "primary50": "#B2D4FF",
                                              "primary75": "#4C9AFF",
                                            },
                                            "spacing": Object {
                                              "baseUnit": 4,
                                              "controlHeight": 38,
                                              "menuGutter": 8,
                                            },
                                          }
                                        }
                                      >
                                        <ForwardRef(render)
                                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                          className=""
                                          css={
                                            Object {
                                              "&:hover": Object {
                                                "borderColor": "hsl(0, 0%, 70%)",
                                              },
                                              ":active": Object {
                                                "border": "1px solid #000000",
                                              },
                                              ":hover": Object {
                                                "border": "1px solid #000000",
                                              },
                                              "alignItems": "center",
                                              "backgroundColor": "#FFFFFF",
                                              "border": "1px solid #B2B2B2",
                                              "borderColor": "hsl(0, 0%, 80%)",
                                              "borderRadius": "4px",
                                              "borderStyle": "solid",
                                              "borderWidth": 1,
                                              "boxShadow": null,
                                              "boxSizing": "border-box",
                                              "cursor": "default",
                                              "display": "flex",
                                              "flexWrap": "wrap",
                                              "justifyContent": "space-between",
                                              "label": "control",
                                              "minHeight": "40px",
                                              "opacity": 1,
                                              "outline": "0 !important",
                                              "position": "relative",
                                              "transition": "all 100ms",
                                            }
                                          }
                                          onMouseDown={[Function]}
                                          onTouchEnd={[Function]}
                                        >
                                          <div
                                            className=" css-1t1pop9-control"
                                            onMouseDown={[Function]}
                                            onTouchEnd={[Function]}
                                          >
                                            <ValueContainer
                                              clearValue={[Function]}
                                              cx={[Function]}
                                              getStyles={[Function]}
                                              getValue={[Function]}
                                              hasValue={true}
                                              isDisabled={false}
                                              isMulti={false}
                                              isRtl={false}
                                              options={Array []}
                                              selectOption={[Function]}
                                              selectProps={
                                                Object {
                                                  "backspaceRemovesValue": true,
                                                  "blurInputOnSelect": true,
                                                  "captureMenuScroll": false,
                                                  "closeMenuOnScroll": false,
                                                  "closeMenuOnSelect": true,
                                                  "components": Object {
                                                    "IndicatorSeparator": [Function],
                                                    "Option": [Function],
                                                  },
                                                  "controlShouldRenderValue": true,
                                                  "deselectAllChildren": "UNSELECT ALL",
                                                  "escapeClearsValue": false,
                                                  "filterOption": [Function],
                                                  "formatGroupLabel": [Function],
                                                  "getOptionLabel": [Function],
                                                  "getOptionValue": [Function],
                                                  "hideSelectedOptions": false,
                                                  "inputValue": "",
                                                  "isClearable": true,
                                                  "isDisabled": false,
                                                  "isLoading": false,
                                                  "isMulti": false,
                                                  "isOptionDisabled": [Function],
                                                  "isRtl": false,
                                                  "isSearchable": true,
                                                  "loadingMessage": [Function],
                                                  "maxMenuHeight": 180,
                                                  "menuIsOpen": false,
                                                  "menuPlacement": "bottom",
                                                  "menuPosition": "absolute",
                                                  "menuShouldBlockScroll": false,
                                                  "menuShouldScrollIntoView": true,
                                                  "minMenuHeight": 140,
                                                  "noOptionsMessage": [Function],
                                                  "onChange": [Function],
                                                  "onInputChange": [Function],
                                                  "onMenuClose": [Function],
                                                  "onMenuOpen": [Function],
                                                  "openMenuOnClick": true,
                                                  "openMenuOnFocus": false,
                                                  "options": Array [],
                                                  "pageSize": 5,
                                                  "placeholder": "Select",
                                                  "screenReaderStatus": [Function],
                                                  "selectAllChildren": "SELECT ALL",
                                                  "styles": Object {
                                                    "clearIndicator": [Function],
                                                    "control": [Function],
                                                    "dropdownIndicator": [Function],
                                                    "input": [Function],
                                                    "menu": [Function],
                                                    "menuList": [Function],
                                                    "menuPortal": [Function],
                                                    "multiValue": [Function],
                                                    "multiValueLabel": [Function],
                                                    "multiValueRemove": [Function],
                                                    "option": [Function],
                                                    "placeholder": [Function],
                                                    "selectAll": [Function],
                                                  },
                                                  "tabIndex": "0",
                                                  "tabSelectsValue": true,
                                                  "value": Object {
                                                    "isDisabled": false,
                                                    "label": "reservation-make",
                                                    "value": "reservation-make",
                                                  },
                                                }
                                              }
                                              setValue={[Function]}
                                              theme={
                                                Object {
                                                  "borderRadius": 4,
                                                  "colors": Object {
                                                    "danger": "#DE350B",
                                                    "dangerLight": "#FFBDAD",
                                                    "neutral0": "hsl(0, 0%, 100%)",
                                                    "neutral10": "hsl(0, 0%, 90%)",
                                                    "neutral20": "hsl(0, 0%, 80%)",
                                                    "neutral30": "hsl(0, 0%, 70%)",
                                                    "neutral40": "hsl(0, 0%, 60%)",
                                                    "neutral5": "hsl(0, 0%, 95%)",
                                                    "neutral50": "hsl(0, 0%, 50%)",
                                                    "neutral60": "hsl(0, 0%, 40%)",
                                                    "neutral70": "hsl(0, 0%, 30%)",
                                                    "neutral80": "hsl(0, 0%, 20%)",
                                                    "neutral90": "hsl(0, 0%, 10%)",
                                                    "primary": "#2684FF",
                                                    "primary25": "#DEEBFF",
                                                    "primary50": "#B2D4FF",
                                                    "primary75": "#4C9AFF",
                                                  },
                                                  "spacing": Object {
                                                    "baseUnit": 4,
                                                    "controlHeight": 38,
                                                    "menuGutter": 8,
                                                  },
                                                }
                                              }
                                            >
                                              <ForwardRef(render)
                                                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                className=""
                                                css={
                                                  Object {
                                                    "WebkitOverflowScrolling": "touch",
                                                    "alignItems": "center",
                                                    "boxSizing": "border-box",
                                                    "display": "flex",
                                                    "flex": 1,
                                                    "flexWrap": "wrap",
                                                    "overflow": "hidden",
                                                    "padding": "2px 8px",
                                                    "position": "relative",
                                                  }
                                                }
                                              >
                                                <div
                                                  className=" css-1hwfws3"
                                                >
                                                  <SingleValue
                                                    clearValue={[Function]}
                                                    cx={[Function]}
                                                    data={
                                                      Object {
                                                        "isDisabled": false,
                                                        "label": "reservation-make",
                                                        "value": "reservation-make",
                                                      }
                                                    }
                                                    getStyles={[Function]}
                                                    getValue={[Function]}
                                                    hasValue={true}
                                                    isDisabled={false}
                                                    isMulti={false}
                                                    isRtl={false}
                                                    options={Array []}
                                                    selectOption={[Function]}
                                                    selectProps={
                                                      Object {
                                                        "backspaceRemovesValue": true,
                                                        "blurInputOnSelect": true,
                                                        "captureMenuScroll": false,
                                                        "closeMenuOnScroll": false,
                                                        "closeMenuOnSelect": true,
                                                        "components": Object {
                                                          "IndicatorSeparator": [Function],
                                                          "Option": [Function],
                                                        },
                                                        "controlShouldRenderValue": true,
                                                        "deselectAllChildren": "UNSELECT ALL",
                                                        "escapeClearsValue": false,
                                                        "filterOption": [Function],
                                                        "formatGroupLabel": [Function],
                                                        "getOptionLabel": [Function],
                                                        "getOptionValue": [Function],
                                                        "hideSelectedOptions": false,
                                                        "inputValue": "",
                                                        "isClearable": true,
                                                        "isDisabled": false,
                                                        "isLoading": false,
                                                        "isMulti": false,
                                                        "isOptionDisabled": [Function],
                                                        "isRtl": false,
                                                        "isSearchable": true,
                                                        "loadingMessage": [Function],
                                                        "maxMenuHeight": 180,
                                                        "menuIsOpen": false,
                                                        "menuPlacement": "bottom",
                                                        "menuPosition": "absolute",
                                                        "menuShouldBlockScroll": false,
                                                        "menuShouldScrollIntoView": true,
                                                        "minMenuHeight": 140,
                                                        "noOptionsMessage": [Function],
                                                        "onChange": [Function],
                                                        "onInputChange": [Function],
                                                        "onMenuClose": [Function],
                                                        "onMenuOpen": [Function],
                                                        "openMenuOnClick": true,
                                                        "openMenuOnFocus": false,
                                                        "options": Array [],
                                                        "pageSize": 5,
                                                        "placeholder": "Select",
                                                        "screenReaderStatus": [Function],
                                                        "selectAllChildren": "SELECT ALL",
                                                        "styles": Object {
                                                          "clearIndicator": [Function],
                                                          "control": [Function],
                                                          "dropdownIndicator": [Function],
                                                          "input": [Function],
                                                          "menu": [Function],
                                                          "menuList": [Function],
                                                          "menuPortal": [Function],
                                                          "multiValue": [Function],
                                                          "multiValueLabel": [Function],
                                                          "multiValueRemove": [Function],
                                                          "option": [Function],
                                                          "placeholder": [Function],
                                                          "selectAll": [Function],
                                                        },
                                                        "tabIndex": "0",
                                                        "tabSelectsValue": true,
                                                        "value": Object {
                                                          "isDisabled": false,
                                                          "label": "reservation-make",
                                                          "value": "reservation-make",
                                                        },
                                                      }
                                                    }
                                                    setValue={[Function]}
                                                    theme={
                                                      Object {
                                                        "borderRadius": 4,
                                                        "colors": Object {
                                                          "danger": "#DE350B",
                                                          "dangerLight": "#FFBDAD",
                                                          "neutral0": "hsl(0, 0%, 100%)",
                                                          "neutral10": "hsl(0, 0%, 90%)",
                                                          "neutral20": "hsl(0, 0%, 80%)",
                                                          "neutral30": "hsl(0, 0%, 70%)",
                                                          "neutral40": "hsl(0, 0%, 60%)",
                                                          "neutral5": "hsl(0, 0%, 95%)",
                                                          "neutral50": "hsl(0, 0%, 50%)",
                                                          "neutral60": "hsl(0, 0%, 40%)",
                                                          "neutral70": "hsl(0, 0%, 30%)",
                                                          "neutral80": "hsl(0, 0%, 20%)",
                                                          "neutral90": "hsl(0, 0%, 10%)",
                                                          "primary": "#2684FF",
                                                          "primary25": "#DEEBFF",
                                                          "primary50": "#B2D4FF",
                                                          "primary75": "#4C9AFF",
                                                        },
                                                        "spacing": Object {
                                                          "baseUnit": 4,
                                                          "controlHeight": 38,
                                                          "menuGutter": 8,
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <ForwardRef(render)
                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                      className=""
                                                      css={
                                                        Object {
                                                          "boxSizing": "border-box",
                                                          "color": "hsl(0, 0%, 20%)",
                                                          "label": "singleValue",
                                                          "marginLeft": 2,
                                                          "marginRight": 2,
                                                          "maxWidth": "calc(100% - 8px)",
                                                          "overflow": "hidden",
                                                          "position": "absolute",
                                                          "textOverflow": "ellipsis",
                                                          "top": "50%",
                                                          "transform": "translateY(-50%)",
                                                          "whiteSpace": "nowrap",
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className=" css-1uccc91-singleValue"
                                                      >
                                                        reservation-make
                                                      </div>
                                                    </ForwardRef(render)>
                                                  </SingleValue>
                                                  <Input
                                                    aria-autocomplete="list"
                                                    autoCapitalize="none"
                                                    autoComplete="off"
                                                    autoCorrect="off"
                                                    cx={[Function]}
                                                    getStyles={[Function]}
                                                    id="react-select-3-input"
                                                    innerRef={[Function]}
                                                    isDisabled={false}
                                                    isHidden={false}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onFocus={[Function]}
                                                    selectProps={
                                                      Object {
                                                        "backspaceRemovesValue": true,
                                                        "blurInputOnSelect": true,
                                                        "captureMenuScroll": false,
                                                        "closeMenuOnScroll": false,
                                                        "closeMenuOnSelect": true,
                                                        "components": Object {
                                                          "IndicatorSeparator": [Function],
                                                          "Option": [Function],
                                                        },
                                                        "controlShouldRenderValue": true,
                                                        "deselectAllChildren": "UNSELECT ALL",
                                                        "escapeClearsValue": false,
                                                        "filterOption": [Function],
                                                        "formatGroupLabel": [Function],
                                                        "getOptionLabel": [Function],
                                                        "getOptionValue": [Function],
                                                        "hideSelectedOptions": false,
                                                        "inputValue": "",
                                                        "isClearable": true,
                                                        "isDisabled": false,
                                                        "isLoading": false,
                                                        "isMulti": false,
                                                        "isOptionDisabled": [Function],
                                                        "isRtl": false,
                                                        "isSearchable": true,
                                                        "loadingMessage": [Function],
                                                        "maxMenuHeight": 180,
                                                        "menuIsOpen": false,
                                                        "menuPlacement": "bottom",
                                                        "menuPosition": "absolute",
                                                        "menuShouldBlockScroll": false,
                                                        "menuShouldScrollIntoView": true,
                                                        "minMenuHeight": 140,
                                                        "noOptionsMessage": [Function],
                                                        "onChange": [Function],
                                                        "onInputChange": [Function],
                                                        "onMenuClose": [Function],
                                                        "onMenuOpen": [Function],
                                                        "openMenuOnClick": true,
                                                        "openMenuOnFocus": false,
                                                        "options": Array [],
                                                        "pageSize": 5,
                                                        "placeholder": "Select",
                                                        "screenReaderStatus": [Function],
                                                        "selectAllChildren": "SELECT ALL",
                                                        "styles": Object {
                                                          "clearIndicator": [Function],
                                                          "control": [Function],
                                                          "dropdownIndicator": [Function],
                                                          "input": [Function],
                                                          "menu": [Function],
                                                          "menuList": [Function],
                                                          "menuPortal": [Function],
                                                          "multiValue": [Function],
                                                          "multiValueLabel": [Function],
                                                          "multiValueRemove": [Function],
                                                          "option": [Function],
                                                          "placeholder": [Function],
                                                          "selectAll": [Function],
                                                        },
                                                        "tabIndex": "0",
                                                        "tabSelectsValue": true,
                                                        "value": Object {
                                                          "isDisabled": false,
                                                          "label": "reservation-make",
                                                          "value": "reservation-make",
                                                        },
                                                      }
                                                    }
                                                    spellCheck="false"
                                                    tabIndex="0"
                                                    theme={
                                                      Object {
                                                        "borderRadius": 4,
                                                        "colors": Object {
                                                          "danger": "#DE350B",
                                                          "dangerLight": "#FFBDAD",
                                                          "neutral0": "hsl(0, 0%, 100%)",
                                                          "neutral10": "hsl(0, 0%, 90%)",
                                                          "neutral20": "hsl(0, 0%, 80%)",
                                                          "neutral30": "hsl(0, 0%, 70%)",
                                                          "neutral40": "hsl(0, 0%, 60%)",
                                                          "neutral5": "hsl(0, 0%, 95%)",
                                                          "neutral50": "hsl(0, 0%, 50%)",
                                                          "neutral60": "hsl(0, 0%, 40%)",
                                                          "neutral70": "hsl(0, 0%, 30%)",
                                                          "neutral80": "hsl(0, 0%, 20%)",
                                                          "neutral90": "hsl(0, 0%, 10%)",
                                                          "primary": "#2684FF",
                                                          "primary25": "#DEEBFF",
                                                          "primary50": "#B2D4FF",
                                                          "primary75": "#4C9AFF",
                                                        },
                                                        "spacing": Object {
                                                          "baseUnit": 4,
                                                          "controlHeight": 38,
                                                          "menuGutter": 8,
                                                        },
                                                      }
                                                    }
                                                    type="text"
                                                    value=""
                                                  >
                                                    <ForwardRef(render)
                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                      css={
                                                        Object {
                                                          "boxSizing": "border-box",
                                                          "color": "#333333",
                                                          "fontSize": "13px",
                                                          "margin": 2,
                                                          "paddingBottom": 2,
                                                          "paddingTop": 2,
                                                          "visibility": "visible",
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="css-1m6xr1n"
                                                      >
                                                        <AutosizeInput
                                                          aria-autocomplete="list"
                                                          autoCapitalize="none"
                                                          autoComplete="off"
                                                          autoCorrect="off"
                                                          className=""
                                                          disabled={false}
                                                          id="react-select-3-input"
                                                          injectStyles={true}
                                                          inputRef={[Function]}
                                                          inputStyle={
                                                            Object {
                                                              "background": 0,
                                                              "border": 0,
                                                              "color": "inherit",
                                                              "fontSize": "inherit",
                                                              "label": "input",
                                                              "opacity": 1,
                                                              "outline": 0,
                                                              "padding": 0,
                                                            }
                                                          }
                                                          minWidth={1}
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          spellCheck="false"
                                                          tabIndex="0"
                                                          type="text"
                                                          value=""
                                                        >
                                                          <div
                                                            className=""
                                                            style={
                                                              Object {
                                                                "display": "inline-block",
                                                              }
                                                            }
                                                          >
                                                            <input
                                                              aria-autocomplete="list"
                                                              autoCapitalize="none"
                                                              autoComplete="off"
                                                              autoCorrect="off"
                                                              disabled={false}
                                                              id="react-select-3-input"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              spellCheck="false"
                                                              style={
                                                                Object {
                                                                  "background": 0,
                                                                  "border": 0,
                                                                  "boxSizing": "content-box",
                                                                  "color": "inherit",
                                                                  "fontSize": "inherit",
                                                                  "label": "input",
                                                                  "opacity": 1,
                                                                  "outline": 0,
                                                                  "padding": 0,
                                                                  "width": "2px",
                                                                }
                                                              }
                                                              tabIndex="0"
                                                              type="text"
                                                              value=""
                                                            />
                                                            <div
                                                              style={
                                                                Object {
                                                                  "height": 0,
                                                                  "left": 0,
                                                                  "overflow": "scroll",
                                                                  "position": "absolute",
                                                                  "top": 0,
                                                                  "visibility": "hidden",
                                                                  "whiteSpace": "pre",
                                                                }
                                                              }
                                                            />
                                                          </div>
                                                        </AutosizeInput>
                                                      </div>
                                                    </ForwardRef(render)>
                                                  </Input>
                                                </div>
                                              </ForwardRef(render)>
                                            </ValueContainer>
                                            <IndicatorsContainer
                                              clearValue={[Function]}
                                              cx={[Function]}
                                              getStyles={[Function]}
                                              getValue={[Function]}
                                              hasValue={true}
                                              isDisabled={false}
                                              isMulti={false}
                                              isRtl={false}
                                              options={Array []}
                                              selectOption={[Function]}
                                              selectProps={
                                                Object {
                                                  "backspaceRemovesValue": true,
                                                  "blurInputOnSelect": true,
                                                  "captureMenuScroll": false,
                                                  "closeMenuOnScroll": false,
                                                  "closeMenuOnSelect": true,
                                                  "components": Object {
                                                    "IndicatorSeparator": [Function],
                                                    "Option": [Function],
                                                  },
                                                  "controlShouldRenderValue": true,
                                                  "deselectAllChildren": "UNSELECT ALL",
                                                  "escapeClearsValue": false,
                                                  "filterOption": [Function],
                                                  "formatGroupLabel": [Function],
                                                  "getOptionLabel": [Function],
                                                  "getOptionValue": [Function],
                                                  "hideSelectedOptions": false,
                                                  "inputValue": "",
                                                  "isClearable": true,
                                                  "isDisabled": false,
                                                  "isLoading": false,
                                                  "isMulti": false,
                                                  "isOptionDisabled": [Function],
                                                  "isRtl": false,
                                                  "isSearchable": true,
                                                  "loadingMessage": [Function],
                                                  "maxMenuHeight": 180,
                                                  "menuIsOpen": false,
                                                  "menuPlacement": "bottom",
                                                  "menuPosition": "absolute",
                                                  "menuShouldBlockScroll": false,
                                                  "menuShouldScrollIntoView": true,
                                                  "minMenuHeight": 140,
                                                  "noOptionsMessage": [Function],
                                                  "onChange": [Function],
                                                  "onInputChange": [Function],
                                                  "onMenuClose": [Function],
                                                  "onMenuOpen": [Function],
                                                  "openMenuOnClick": true,
                                                  "openMenuOnFocus": false,
                                                  "options": Array [],
                                                  "pageSize": 5,
                                                  "placeholder": "Select",
                                                  "screenReaderStatus": [Function],
                                                  "selectAllChildren": "SELECT ALL",
                                                  "styles": Object {
                                                    "clearIndicator": [Function],
                                                    "control": [Function],
                                                    "dropdownIndicator": [Function],
                                                    "input": [Function],
                                                    "menu": [Function],
                                                    "menuList": [Function],
                                                    "menuPortal": [Function],
                                                    "multiValue": [Function],
                                                    "multiValueLabel": [Function],
                                                    "multiValueRemove": [Function],
                                                    "option": [Function],
                                                    "placeholder": [Function],
                                                    "selectAll": [Function],
                                                  },
                                                  "tabIndex": "0",
                                                  "tabSelectsValue": true,
                                                  "value": Object {
                                                    "isDisabled": false,
                                                    "label": "reservation-make",
                                                    "value": "reservation-make",
                                                  },
                                                }
                                              }
                                              setValue={[Function]}
                                              theme={
                                                Object {
                                                  "borderRadius": 4,
                                                  "colors": Object {
                                                    "danger": "#DE350B",
                                                    "dangerLight": "#FFBDAD",
                                                    "neutral0": "hsl(0, 0%, 100%)",
                                                    "neutral10": "hsl(0, 0%, 90%)",
                                                    "neutral20": "hsl(0, 0%, 80%)",
                                                    "neutral30": "hsl(0, 0%, 70%)",
                                                    "neutral40": "hsl(0, 0%, 60%)",
                                                    "neutral5": "hsl(0, 0%, 95%)",
                                                    "neutral50": "hsl(0, 0%, 50%)",
                                                    "neutral60": "hsl(0, 0%, 40%)",
                                                    "neutral70": "hsl(0, 0%, 30%)",
                                                    "neutral80": "hsl(0, 0%, 20%)",
                                                    "neutral90": "hsl(0, 0%, 10%)",
                                                    "primary": "#2684FF",
                                                    "primary25": "#DEEBFF",
                                                    "primary50": "#B2D4FF",
                                                    "primary75": "#4C9AFF",
                                                  },
                                                  "spacing": Object {
                                                    "baseUnit": 4,
                                                    "controlHeight": 38,
                                                    "menuGutter": 8,
                                                  },
                                                }
                                              }
                                            >
                                              <ForwardRef(render)
                                                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                className=""
                                                css={
                                                  Object {
                                                    "alignItems": "center",
                                                    "alignSelf": "stretch",
                                                    "boxSizing": "border-box",
                                                    "display": "flex",
                                                    "flexShrink": 0,
                                                  }
                                                }
                                              >
                                                <div
                                                  className=" css-1wy0on6"
                                                >
                                                  <ClearIndicator
                                                    clearValue={[Function]}
                                                    cx={[Function]}
                                                    getStyles={[Function]}
                                                    getValue={[Function]}
                                                    hasValue={true}
                                                    innerProps={
                                                      Object {
                                                        "aria-hidden": "true",
                                                        "onMouseDown": [Function],
                                                        "onTouchEnd": [Function],
                                                      }
                                                    }
                                                    isFocused={false}
                                                    isMulti={false}
                                                    isRtl={false}
                                                    options={Array []}
                                                    selectOption={[Function]}
                                                    selectProps={
                                                      Object {
                                                        "backspaceRemovesValue": true,
                                                        "blurInputOnSelect": true,
                                                        "captureMenuScroll": false,
                                                        "closeMenuOnScroll": false,
                                                        "closeMenuOnSelect": true,
                                                        "components": Object {
                                                          "IndicatorSeparator": [Function],
                                                          "Option": [Function],
                                                        },
                                                        "controlShouldRenderValue": true,
                                                        "deselectAllChildren": "UNSELECT ALL",
                                                        "escapeClearsValue": false,
                                                        "filterOption": [Function],
                                                        "formatGroupLabel": [Function],
                                                        "getOptionLabel": [Function],
                                                        "getOptionValue": [Function],
                                                        "hideSelectedOptions": false,
                                                        "inputValue": "",
                                                        "isClearable": true,
                                                        "isDisabled": false,
                                                        "isLoading": false,
                                                        "isMulti": false,
                                                        "isOptionDisabled": [Function],
                                                        "isRtl": false,
                                                        "isSearchable": true,
                                                        "loadingMessage": [Function],
                                                        "maxMenuHeight": 180,
                                                        "menuIsOpen": false,
                                                        "menuPlacement": "bottom",
                                                        "menuPosition": "absolute",
                                                        "menuShouldBlockScroll": false,
                                                        "menuShouldScrollIntoView": true,
                                                        "minMenuHeight": 140,
                                                        "noOptionsMessage": [Function],
                                                        "onChange": [Function],
                                                        "onInputChange": [Function],
                                                        "onMenuClose": [Function],
                                                        "onMenuOpen": [Function],
                                                        "openMenuOnClick": true,
                                                        "openMenuOnFocus": false,
                                                        "options": Array [],
                                                        "pageSize": 5,
                                                        "placeholder": "Select",
                                                        "screenReaderStatus": [Function],
                                                        "selectAllChildren": "SELECT ALL",
                                                        "styles": Object {
                                                          "clearIndicator": [Function],
                                                          "control": [Function],
                                                          "dropdownIndicator": [Function],
                                                          "input": [Function],
                                                          "menu": [Function],
                                                          "menuList": [Function],
                                                          "menuPortal": [Function],
                                                          "multiValue": [Function],
                                                          "multiValueLabel": [Function],
                                                          "multiValueRemove": [Function],
                                                          "option": [Function],
                                                          "placeholder": [Function],
                                                          "selectAll": [Function],
                                                        },
                                                        "tabIndex": "0",
                                                        "tabSelectsValue": true,
                                                        "value": Object {
                                                          "isDisabled": false,
                                                          "label": "reservation-make",
                                                          "value": "reservation-make",
                                                        },
                                                      }
                                                    }
                                                    setValue={[Function]}
                                                    theme={
                                                      Object {
                                                        "borderRadius": 4,
                                                        "colors": Object {
                                                          "danger": "#DE350B",
                                                          "dangerLight": "#FFBDAD",
                                                          "neutral0": "hsl(0, 0%, 100%)",
                                                          "neutral10": "hsl(0, 0%, 90%)",
                                                          "neutral20": "hsl(0, 0%, 80%)",
                                                          "neutral30": "hsl(0, 0%, 70%)",
                                                          "neutral40": "hsl(0, 0%, 60%)",
                                                          "neutral5": "hsl(0, 0%, 95%)",
                                                          "neutral50": "hsl(0, 0%, 50%)",
                                                          "neutral60": "hsl(0, 0%, 40%)",
                                                          "neutral70": "hsl(0, 0%, 30%)",
                                                          "neutral80": "hsl(0, 0%, 20%)",
                                                          "neutral90": "hsl(0, 0%, 10%)",
                                                          "primary": "#2684FF",
                                                          "primary25": "#DEEBFF",
                                                          "primary50": "#B2D4FF",
                                                          "primary75": "#4C9AFF",
                                                        },
                                                        "spacing": Object {
                                                          "baseUnit": 4,
                                                          "controlHeight": 38,
                                                          "menuGutter": 8,
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <ForwardRef(render)
                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                      aria-hidden="true"
                                                      className=""
                                                      css={
                                                        Object {
                                                          ":hover": Object {
                                                            "color": "hsl(0, 0%, 60%)",
                                                          },
                                                          "boxSizing": "border-box",
                                                          "color": "hsl(0, 0%, 80%)",
                                                          "display": "none",
                                                          "label": "indicatorContainer",
                                                          "padding": 8,
                                                          "transition": "color 150ms",
                                                        }
                                                      }
                                                      onMouseDown={[Function]}
                                                      onTouchEnd={[Function]}
                                                    >
                                                      <div
                                                        aria-hidden="true"
                                                        className=" css-tpaeio-indicatorContainer"
                                                        onMouseDown={[Function]}
                                                        onTouchEnd={[Function]}
                                                      >
                                                        <CrossIcon>
                                                          <Svg
                                                            size={20}
                                                          >
                                                            <ForwardRef(render)
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                              aria-hidden="true"
                                                              css={
                                                                Object {
                                                                  "name": "19bqh2r",
                                                                  "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;",
                                                                }
                                                              }
                                                              focusable="false"
                                                              height={20}
                                                              viewBox="0 0 20 20"
                                                              width={20}
                                                            >
                                                              <svg
                                                                aria-hidden="true"
                                                                className="css-19bqh2r"
                                                                focusable="false"
                                                                height={20}
                                                                viewBox="0 0 20 20"
                                                                width={20}
                                                              >
                                                                <path
                                                                  d="M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
                                                                />
                                                              </svg>
                                                            </ForwardRef(render)>
                                                          </Svg>
                                                        </CrossIcon>
                                                      </div>
                                                    </ForwardRef(render)>
                                                  </ClearIndicator>
                                                  <IndicatorSeparator
                                                    clearValue={[Function]}
                                                    cx={[Function]}
                                                    getStyles={[Function]}
                                                    getValue={[Function]}
                                                    hasValue={true}
                                                    isDisabled={false}
                                                    isFocused={false}
                                                    isMulti={false}
                                                    isRtl={false}
                                                    options={Array []}
                                                    selectOption={[Function]}
                                                    selectProps={
                                                      Object {
                                                        "backspaceRemovesValue": true,
                                                        "blurInputOnSelect": true,
                                                        "captureMenuScroll": false,
                                                        "closeMenuOnScroll": false,
                                                        "closeMenuOnSelect": true,
                                                        "components": Object {
                                                          "IndicatorSeparator": [Function],
                                                          "Option": [Function],
                                                        },
                                                        "controlShouldRenderValue": true,
                                                        "deselectAllChildren": "UNSELECT ALL",
                                                        "escapeClearsValue": false,
                                                        "filterOption": [Function],
                                                        "formatGroupLabel": [Function],
                                                        "getOptionLabel": [Function],
                                                        "getOptionValue": [Function],
                                                        "hideSelectedOptions": false,
                                                        "inputValue": "",
                                                        "isClearable": true,
                                                        "isDisabled": false,
                                                        "isLoading": false,
                                                        "isMulti": false,
                                                        "isOptionDisabled": [Function],
                                                        "isRtl": false,
                                                        "isSearchable": true,
                                                        "loadingMessage": [Function],
                                                        "maxMenuHeight": 180,
                                                        "menuIsOpen": false,
                                                        "menuPlacement": "bottom",
                                                        "menuPosition": "absolute",
                                                        "menuShouldBlockScroll": false,
                                                        "menuShouldScrollIntoView": true,
                                                        "minMenuHeight": 140,
                                                        "noOptionsMessage": [Function],
                                                        "onChange": [Function],
                                                        "onInputChange": [Function],
                                                        "onMenuClose": [Function],
                                                        "onMenuOpen": [Function],
                                                        "openMenuOnClick": true,
                                                        "openMenuOnFocus": false,
                                                        "options": Array [],
                                                        "pageSize": 5,
                                                        "placeholder": "Select",
                                                        "screenReaderStatus": [Function],
                                                        "selectAllChildren": "SELECT ALL",
                                                        "styles": Object {
                                                          "clearIndicator": [Function],
                                                          "control": [Function],
                                                          "dropdownIndicator": [Function],
                                                          "input": [Function],
                                                          "menu": [Function],
                                                          "menuList": [Function],
                                                          "menuPortal": [Function],
                                                          "multiValue": [Function],
                                                          "multiValueLabel": [Function],
                                                          "multiValueRemove": [Function],
                                                          "option": [Function],
                                                          "placeholder": [Function],
                                                          "selectAll": [Function],
                                                        },
                                                        "tabIndex": "0",
                                                        "tabSelectsValue": true,
                                                        "value": Object {
                                                          "isDisabled": false,
                                                          "label": "reservation-make",
                                                          "value": "reservation-make",
                                                        },
                                                      }
                                                    }
                                                    setValue={[Function]}
                                                    theme={
                                                      Object {
                                                        "borderRadius": 4,
                                                        "colors": Object {
                                                          "danger": "#DE350B",
                                                          "dangerLight": "#FFBDAD",
                                                          "neutral0": "hsl(0, 0%, 100%)",
                                                          "neutral10": "hsl(0, 0%, 90%)",
                                                          "neutral20": "hsl(0, 0%, 80%)",
                                                          "neutral30": "hsl(0, 0%, 70%)",
                                                          "neutral40": "hsl(0, 0%, 60%)",
                                                          "neutral5": "hsl(0, 0%, 95%)",
                                                          "neutral50": "hsl(0, 0%, 50%)",
                                                          "neutral60": "hsl(0, 0%, 40%)",
                                                          "neutral70": "hsl(0, 0%, 30%)",
                                                          "neutral80": "hsl(0, 0%, 20%)",
                                                          "neutral90": "hsl(0, 0%, 10%)",
                                                          "primary": "#2684FF",
                                                          "primary25": "#DEEBFF",
                                                          "primary50": "#B2D4FF",
                                                          "primary75": "#4C9AFF",
                                                        },
                                                        "spacing": Object {
                                                          "baseUnit": 4,
                                                          "controlHeight": 38,
                                                          "menuGutter": 8,
                                                        },
                                                      }
                                                    }
                                                  />
                                                  <DropdownIndicator
                                                    clearValue={[Function]}
                                                    cx={[Function]}
                                                    getStyles={[Function]}
                                                    getValue={[Function]}
                                                    hasValue={true}
                                                    innerProps={
                                                      Object {
                                                        "aria-hidden": "true",
                                                        "onMouseDown": [Function],
                                                        "onTouchEnd": [Function],
                                                      }
                                                    }
                                                    isDisabled={false}
                                                    isFocused={false}
                                                    isMulti={false}
                                                    isRtl={false}
                                                    options={Array []}
                                                    selectOption={[Function]}
                                                    selectProps={
                                                      Object {
                                                        "backspaceRemovesValue": true,
                                                        "blurInputOnSelect": true,
                                                        "captureMenuScroll": false,
                                                        "closeMenuOnScroll": false,
                                                        "closeMenuOnSelect": true,
                                                        "components": Object {
                                                          "IndicatorSeparator": [Function],
                                                          "Option": [Function],
                                                        },
                                                        "controlShouldRenderValue": true,
                                                        "deselectAllChildren": "UNSELECT ALL",
                                                        "escapeClearsValue": false,
                                                        "filterOption": [Function],
                                                        "formatGroupLabel": [Function],
                                                        "getOptionLabel": [Function],
                                                        "getOptionValue": [Function],
                                                        "hideSelectedOptions": false,
                                                        "inputValue": "",
                                                        "isClearable": true,
                                                        "isDisabled": false,
                                                        "isLoading": false,
                                                        "isMulti": false,
                                                        "isOptionDisabled": [Function],
                                                        "isRtl": false,
                                                        "isSearchable": true,
                                                        "loadingMessage": [Function],
                                                        "maxMenuHeight": 180,
                                                        "menuIsOpen": false,
                                                        "menuPlacement": "bottom",
                                                        "menuPosition": "absolute",
                                                        "menuShouldBlockScroll": false,
                                                        "menuShouldScrollIntoView": true,
                                                        "minMenuHeight": 140,
                                                        "noOptionsMessage": [Function],
                                                        "onChange": [Function],
                                                        "onInputChange": [Function],
                                                        "onMenuClose": [Function],
                                                        "onMenuOpen": [Function],
                                                        "openMenuOnClick": true,
                                                        "openMenuOnFocus": false,
                                                        "options": Array [],
                                                        "pageSize": 5,
                                                        "placeholder": "Select",
                                                        "screenReaderStatus": [Function],
                                                        "selectAllChildren": "SELECT ALL",
                                                        "styles": Object {
                                                          "clearIndicator": [Function],
                                                          "control": [Function],
                                                          "dropdownIndicator": [Function],
                                                          "input": [Function],
                                                          "menu": [Function],
                                                          "menuList": [Function],
                                                          "menuPortal": [Function],
                                                          "multiValue": [Function],
                                                          "multiValueLabel": [Function],
                                                          "multiValueRemove": [Function],
                                                          "option": [Function],
                                                          "placeholder": [Function],
                                                          "selectAll": [Function],
                                                        },
                                                        "tabIndex": "0",
                                                        "tabSelectsValue": true,
                                                        "value": Object {
                                                          "isDisabled": false,
                                                          "label": "reservation-make",
                                                          "value": "reservation-make",
                                                        },
                                                      }
                                                    }
                                                    setValue={[Function]}
                                                    theme={
                                                      Object {
                                                        "borderRadius": 4,
                                                        "colors": Object {
                                                          "danger": "#DE350B",
                                                          "dangerLight": "#FFBDAD",
                                                          "neutral0": "hsl(0, 0%, 100%)",
                                                          "neutral10": "hsl(0, 0%, 90%)",
                                                          "neutral20": "hsl(0, 0%, 80%)",
                                                          "neutral30": "hsl(0, 0%, 70%)",
                                                          "neutral40": "hsl(0, 0%, 60%)",
                                                          "neutral5": "hsl(0, 0%, 95%)",
                                                          "neutral50": "hsl(0, 0%, 50%)",
                                                          "neutral60": "hsl(0, 0%, 40%)",
                                                          "neutral70": "hsl(0, 0%, 30%)",
                                                          "neutral80": "hsl(0, 0%, 20%)",
                                                          "neutral90": "hsl(0, 0%, 10%)",
                                                          "primary": "#2684FF",
                                                          "primary25": "#DEEBFF",
                                                          "primary50": "#B2D4FF",
                                                          "primary75": "#4C9AFF",
                                                        },
                                                        "spacing": Object {
                                                          "baseUnit": 4,
                                                          "controlHeight": 38,
                                                          "menuGutter": 8,
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <ForwardRef(render)
                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                      aria-hidden="true"
                                                      className=""
                                                      css={
                                                        Object {
                                                          ":hover": Object {
                                                            "color": "hsl(0, 0%, 60%)",
                                                          },
                                                          "boxSizing": "border-box",
                                                          "color": "#333333",
                                                          "display": "flex",
                                                          "label": "indicatorContainer",
                                                          "padding": 8,
                                                          "transition": "color 150ms",
                                                        }
                                                      }
                                                      onMouseDown={[Function]}
                                                      onTouchEnd={[Function]}
                                                    >
                                                      <div
                                                        aria-hidden="true"
                                                        className=" css-hmgdr5-indicatorContainer"
                                                        onMouseDown={[Function]}
                                                        onTouchEnd={[Function]}
                                                      >
                                                        <DownChevron>
                                                          <Svg
                                                            size={20}
                                                          >
                                                            <ForwardRef(render)
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                              aria-hidden="true"
                                                              css={
                                                                Object {
                                                                  "name": "19bqh2r",
                                                                  "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;",
                                                                }
                                                              }
                                                              focusable="false"
                                                              height={20}
                                                              viewBox="0 0 20 20"
                                                              width={20}
                                                            >
                                                              <svg
                                                                aria-hidden="true"
                                                                className="css-19bqh2r"
                                                                focusable="false"
                                                                height={20}
                                                                viewBox="0 0 20 20"
                                                                width={20}
                                                              >
                                                                <path
                                                                  d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                                                />
                                                              </svg>
                                                            </ForwardRef(render)>
                                                          </Svg>
                                                        </DownChevron>
                                                      </div>
                                                    </ForwardRef(render)>
                                                  </DropdownIndicator>
                                                </div>
                                              </ForwardRef(render)>
                                            </IndicatorsContainer>
                                          </div>
                                        </ForwardRef(render)>
                                      </Control>
                                    </div>
                                  </ForwardRef(render)>
                                </SelectContainer>
                              </Select>
                            </StateManager>
                          </div>
                        </Select>
                      </withTheme(Select)>
                    </li>
                  </ul>
                  <withTheme(Button)
                    disabled={false}
                    key=".1"
                    name="save-item"
                    onClick={[Function]}
                    styleOverride={
                      Object {
                        "position": "absolute",
                        "right": 0,
                      }
                    }
                    type="primary"
                  >
                    <Button
                      disabled={false}
                      name="save-item"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                      styleOverride={
                        Object {
                          "position": "absolute",
                          "right": 0,
                        }
                      }
                      tabIndex={0}
                      tfsStyle={
                        Object {
                          "button": Object {
                            "base": Object {
                              ":focus": Object {
                                "outline": "2px solid #009CDE",
                              },
                              "border": "1px solid transparent",
                              "borderRadius": "4px",
                              "cursor": "pointer",
                              "fontSize": "13px",
                              "fontWeight": 600,
                              "minHeight": "35px",
                              "minWidth": "100px",
                              "outlineOffset": "2px",
                              "paddingLeft": "20px",
                              "paddingRight": "20px",
                              "wordBreak": "normal",
                            },
                            "disabled": Object {
                              "cursor": "not-allowed",
                              "flat": Object {
                                "color": "#666666",
                              },
                              "primary": Object {
                                "backgroundColor": "#E0E0E0",
                                "color": "#666666",
                              },
                              "secondary": Object {
                                "border": "2px solid #E0E0E0",
                                "color": "#666666",
                              },
                            },
                            "flat": Object {
                              ":active": Object {
                                "color": "#004C97",
                              },
                              ":hover": Object {
                                "boxShadow": "0px 2px 5px 0px #DBDBDB",
                                "color": "#336FAB",
                              },
                              "backgroundColor": "transparent",
                              "color": "#000000",
                              "minWidth": "auto",
                              "paddingLeft": "10px",
                              "paddingRight": "10px",
                            },
                            "primary": Object {
                              ":active": Object {
                                "backgroundColor": "#336FAB",
                                "boxShadow": "inset 0px 0px 3px 0px #004C97",
                                "color": "#FFFFFF",
                              },
                              ":hover": Object {
                                "backgroundColor": "#336FAB",
                                "boxShadow": "2px 3px 10px 0px #DBDBDB",
                                "color": "#FFFFFF",
                              },
                              "backgroundColor": "#004C97",
                              "color": "#FFFFFF",
                            },
                            "secondary": Object {
                              ":active": Object {
                                "border": "2px solid #336FAB",
                                "boxShadow": "inset 0px 0px 3px 0px #336FAB",
                                "color": "#336FAB",
                              },
                              ":hover": Object {
                                "border": "2px solid #336FAB",
                                "boxShadow": "0px 2px 5px 0px #DBDBDB",
                                "color": "#336FAB",
                              },
                              "backgroundColor": "#FFFFFF",
                              "border": "2px solid #004C97",
                              "color": "#004C97",
                            },
                          },
                        }
                      }
                      type="primary"
                    >
                      <button
                        data-radium={true}
                        disabled={false}
                        name="save-item"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        style={
                          Object {
                            "backgroundColor": "#004C97",
                            "border": "1px solid transparent",
                            "borderRadius": "4px",
                            "color": "#FFFFFF",
                            "cursor": "pointer",
                            "fontSize": "13px",
                            "fontWeight": 600,
                            "minHeight": "35px",
                            "minWidth": "100px",
                            "outlineOffset": "2px",
                            "paddingLeft": "20px",
                            "paddingRight": "20px",
                            "position": "absolute",
                            "right": 0,
                            "wordBreak": "normal",
                          }
                        }
                        tabIndex={0}
                        type="button"
                      >
                        UPDATE
                      </button>
                    </Button>
                  </withTheme(Button)>
                </div>
              </div>
            </div>
          </div>
        </Tabs>
      </withTheme(Tabs)>
    </div>
    <div
      id="nextButtonArea"
    />
  </div>
</PostProcessingTransformations>
`;

exports[`<PostProcessingTransformations /> Functionality: getPostProcessingJSON: renders correctly when call getPostProcessingJSON 1`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  weerewr,wrewr
                </div>
                <div
                  className="transformation-type"
                >
                  Reservation_Upgrade - Points_Buy
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="weerewr,wrewr"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Reservation_Upgrade",
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "Reservation_Upgrade",
                          "value": "Reservation_Upgrade",
                        },
                      ]
                    }
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "Points_Buy",
                        "value": "Points_Buy",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={false}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/(?:weerewr|wrewr)/",
                  "intent-match": Array [
                    "Reservation_Upgrade",
                  ],
                  "intent-replacement": "Points_Buy",
                  "maxConfidenceScore": -1,
                  "minConfidenceScore": -1,
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Functionality: getPostProcessingUI: renders correctly when call getPostProcessingUI with undefined values 1`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  weerewr,wrewr
                </div>
                <div
                  className="transformation-type"
                >
                  Reservation_Upgrade - Points_Buy
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="weerewr,wrewr"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Reservation_Upgrade",
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "Reservation_Upgrade",
                          "value": "Reservation_Upgrade",
                        },
                      ]
                    }
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "Points_Buy",
                        "value": "Points_Buy",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={false}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/(?:weerewr|wrewr)/",
                  "intent-match": Array [
                    "Reservation_Upgrade",
                  ],
                  "intent-replacement": "Points_Buy",
                  "maxConfidenceScore": -1,
                  "minConfidenceScore": -1,
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Functionality: onKeyPress: should call dispatch action on onKeyPress call 1`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  weerewr,wrewr
                </div>
                <div
                  className="transformation-type"
                >
                  Reservation_Upgrade - Points_Buy
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="weerewr,wrewr"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Reservation_Upgrade",
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "Reservation_Upgrade",
                          "value": "Reservation_Upgrade",
                        },
                      ]
                    }
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "Points_Buy",
                        "value": "Points_Buy",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={false}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/(?:weerewr|wrewr)/",
                  "intent-match": Array [
                    "Reservation_Upgrade",
                  ],
                  "intent-replacement": "Points_Buy",
                  "maxConfidenceScore": -1,
                  "minConfidenceScore": -1,
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Functionality: onUpdateProcessingRules: should render correctly on onUpdateProcessingRules call 1`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  weerewr,wrewr
                </div>
                <div
                  className="transformation-type"
                >
                   - Points_Buy
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="weerewr,wrewr"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Reservation_Upgrade",
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value=""
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "Points_Buy",
                        "value": "Points_Buy",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={true}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/(?:weerewr|wrewr)/",
                  "intent-match": "",
                  "intent-replacement": "Points_Buy",
                  "maxConfidenceScore": -1,
                  "minConfidenceScore": -1,
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Functionality: renderTabs: renders correctly when call renderTabs 1`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  weerewr,wrewr
                </div>
                <div
                  className="transformation-type"
                >
                  Reservation_Upgrade - Points_Buy
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="weerewr,wrewr"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Reservation_Upgrade",
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "Reservation_Upgrade",
                          "value": "Reservation_Upgrade",
                        },
                      ]
                    }
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "Points_Buy",
                        "value": "Points_Buy",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={false}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/(?:weerewr|wrewr)/",
                  "intent-match": Array [
                    "Reservation_Upgrade",
                  ],
                  "intent-replacement": "Points_Buy",
                  "maxConfidenceScore": -1,
                  "minConfidenceScore": -1,
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Snapshots renders correctly when call getItems with undefined values 1`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  /new reservation/
                </div>
                <div
                  className="transformation-type"
                >
                  reservation-query - reservation-make
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="/new reservation/"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "any",
                          "value": "any",
                        },
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "reservation-query",
                          "value": "reservation-query",
                        },
                      ]
                    }
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "reservation-make",
                        "value": "reservation-make",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={false}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/new reservation/",
                  "intent-match": Array [
                    "reservation-query",
                  ],
                  "intent-replacement": "reservation-make",
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Snapshots renders correctly with isCurrentTab as false 1`] = `""`;

exports[`<PostProcessingTransformations /> Snapshots renders correctly with string type transformation 1`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  /new reservation/
                </div>
                <div
                  className="transformation-type"
                >
                  reservation-query - reservation-make
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="/new reservation/"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "any",
                          "value": "any",
                        },
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "reservation-query",
                          "value": "reservation-query",
                        },
                      ]
                    }
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "reservation-make",
                        "value": "reservation-make",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={false}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/new reservation/",
                  "intent-match": Array [
                    "reservation-query",
                  ],
                  "intent-replacement": "reservation-make",
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Snapshots renders correctly with string type transformation 2`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={Array []}
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue=""
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={true}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "any",
                          "value": "any",
                        },
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value=""
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value=""
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={true}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                ADD
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "",
                  "intent-match": "",
                  "intent-replacement": "",
                  "maxConfidenceScore": -1,
                  "minConfidenceScore": -1,
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Snapshots should correctly render with data on trimValue call 1`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  /new reservation/
                </div>
                <div
                  className="transformation-type"
                >
                  reservation-query - reservation-make
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="/new reservation/"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "any",
                          "value": "any",
                        },
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "reservation-query",
                          "value": "reservation-query",
                        },
                      ]
                    }
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "reservation-make",
                        "value": "reservation-make",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={false}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/new reservation/",
                  "intent-match": Array [
                    "reservation-query",
                  ],
                  "intent-replacement": "reservation-make",
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;

exports[`<PostProcessingTransformations /> Snapshots should correctly render with data on trimValue call 2`] = `
<div
  id="ModelTransformationContainer"
>
  <div
    id="modelTransformationItems"
  >
    <div
      id="PostProcessingTransformations"
    >
      <div
        style={
          Object {
            "borderBottom": "1px solid #ddd",
            "lineHeight": "60px",
            "paddingBottom": 2,
            "paddingLeft": 30,
          }
        }
      >
        Rules
      </div>
      <withTheme(ContextualActionsBar)
        styleOverride={
          Object {
            "borderBottom": "1px solid #ddd",
            "borderTop": "none",
          }
        }
      >
        <withTheme(ContextualActionItem)
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          onClickAction={[Function]}
          styleOverride={
            Object {
              "margin": "24px 0px",
            }
          }
        >
          ADD
        </withTheme(ContextualActionItem)>
      </withTheme(ContextualActionsBar)>
      <DragDropWrapper
        droppableId="postprocessing-droppable"
        getListStyle={[Function]}
        isDisabled={false}
        items={
          Array [
            Object {
              "content": <DraggableItem
                className="transformation-list-item transformation-selected-item"
                id="name-0"
                index={0}
                itemContentClass="transformation-item-content"
                modelViewReadOnly={false}
                noOfItems={0}
                onDelete={[Function]}
                onSelect={[Function]}
              >
                <div
                  className="transformation-name"
                >
                  /new reservation/
                </div>
                <div
                  className="transformation-type"
                >
                  reservation-query - reservation-make
                </div>
              </DraggableItem>,
              "id": "name-0",
            },
          ]
        }
        onDragEnd={[Function]}
      />
    </div>
  </div>
  <div
    id="modelTransformationEditor"
  >
    <withTheme(Tabs)
      align="left"
      forceRenderTabPanel={false}
      onTabSelected={[Function]}
      selectedIndex={0}
      styleOverride={
        Object {
          "tabContainer": Object {
            "borderTop": "none",
            "marginLeft": "1px",
          },
          "tabPanel": Object {
            "height": "calc(100vh - 245px)",
          },
        }
      }
      tabPanels={
        Array [
          <div
            className="editor-panel"
            id="Editor"
          >
            <div
              className="post-processing-container"
              style={
                Object {
                  "position": "relative",
                  "width": "430px",
                }
              }
            >
              <ul
                className="form-fields rules-form"
              >
                <li>
                  <label>
                    Input Match*
                  </label>
                  <withTheme(TextField)
                    data-idx={0}
                    data-name="input-match"
                    data-qa="input-match"
                    defaultValue="/new reservation/"
                    disabled={false}
                    onBlur={[Function]}
                    onKeyPress={[Function]}
                    styleOverride={
                      Object {
                        "width": "100%",
                      }
                    }
                    type="text"
                  />
                  <div
                    className="help-text overflow-wrap"
                    style={
                      Object {
                        "color": "#727272",
                      }
                    }
                  >
                    Enter comma separated input match values
                  </div>
                </li>
                <li>
                  <label>
                    Intent Match*
                  </label>
                  <withTheme(CreatableSelect)
                    isClearable={true}
                    isDisabled={false}
                    isMulti={false}
                    isSearchable={true}
                    onChange={[Function]}
                    onCreateOption={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "any",
                          "value": "any",
                        },
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": "reservation-query",
                          "value": "reservation-query",
                        },
                      ]
                    }
                  />
                </li>
                <li>
                  <label>
                    Intent Replacement*
                  </label>
                  <withTheme(Select)
                    isClearable={true}
                    isDisabled={false}
                    isSearchable={true}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "isDisabled": false,
                          "label": undefined,
                          "value": undefined,
                        },
                      ]
                    }
                    styleOverride={
                      Object {
                        "container": Object {
                          "width": "100%",
                        },
                      }
                    }
                    value={
                      Object {
                        "isDisabled": false,
                        "label": "reservation-make",
                        "value": "reservation-make",
                      }
                    }
                  />
                </li>
              </ul>
              <withTheme(Button)
                disabled={false}
                name="save-item"
                onClick={[Function]}
                styleOverride={
                  Object {
                    "position": "absolute",
                    "right": 0,
                  }
                }
                type="primary"
              >
                UPDATE
              </withTheme(Button)>
            </div>
          </div>,
          <div
            className="editor-panel"
            id="Editor"
          >
            <PostProcessingJSONEditor
              currentItem={
                Object {
                  "input-match": "/new reservation/",
                  "intent-match": Array [
                    "reservation-query",
                  ],
                  "intent-replacement": "reservation-make",
                }
              }
              modelViewReadOnly={false}
              onUpdateProcessingRules={[Function]}
              ruleIdx={0}
            />
          </div>,
        ]
      }
      tabs={
        Array [
          "UI",
          "JSON",
        ]
      }
    />
  </div>
  <div
    id="nextButtonArea"
  />
</div>
`;
